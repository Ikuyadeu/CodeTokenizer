# Generated from PhpParser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00e9")
        buf.write("\u0658\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\3\2\5\2\u0106\n\2\3\2")
        buf.write("\7\2\u0109\n\2\f\2\16\2\u010c\13\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\5\3\u0113\n\3\3\4\6\4\u0116\n\4\r\4\16\4\u0117\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u0130\n\5\f\5\16\5\u0133")
        buf.write("\13\5\3\5\5\5\u0136\n\5\3\6\6\6\u0139\n\6\r\6\16\6\u013a")
        buf.write("\3\7\7\7\u013e\n\7\f\7\16\7\u0141\13\7\3\7\6\7\u0144\n")
        buf.write("\7\r\7\16\7\u0145\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\5\t\u0153\n\t\3\n\3\n\5\n\u0157\n\n\3\n\3\n\3")
        buf.write("\n\3\13\5\13\u015d\n\13\3\13\3\13\3\13\5\13\u0162\n\13")
        buf.write("\3\13\7\13\u0165\n\13\f\13\16\13\u0168\13\13\3\f\3\f\3")
        buf.write("\f\5\f\u016d\n\f\3\r\3\r\5\r\u0171\n\r\3\r\3\r\7\r\u0175")
        buf.write("\n\r\f\r\16\r\u0178\13\r\3\r\3\r\3\r\3\r\5\r\u017e\n\r")
        buf.write("\3\16\3\16\3\16\3\16\3\16\5\16\u0185\n\16\3\17\3\17\3")
        buf.write("\17\5\17\u018a\n\17\3\17\3\17\5\17\u018e\n\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\5\20\u0197\n\20\3\20\5\20\u019a")
        buf.write("\n\20\3\20\5\20\u019d\n\20\3\20\3\20\3\20\5\20\u01a2\n")
        buf.write("\20\3\20\3\20\5\20\u01a6\n\20\3\20\3\20\5\20\u01aa\n\20")
        buf.write("\3\20\3\20\3\20\5\20\u01af\n\20\3\20\3\20\5\20\u01b3\n")
        buf.write("\20\5\20\u01b5\n\20\3\20\3\20\7\20\u01b9\n\20\f\20\16")
        buf.write("\20\u01bc\13\20\3\20\3\20\3\21\3\21\3\22\3\22\3\22\7\22")
        buf.write("\u01c5\n\22\f\22\16\22\u01c8\13\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23")
        buf.write("\u01d8\n\23\3\24\3\24\3\24\7\24\u01dd\n\24\f\24\16\24")
        buf.write("\u01e0\13\24\3\25\3\25\3\25\7\25\u01e5\n\25\f\25\16\25")
        buf.write("\u01e8\13\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\5")
        buf.write("\27\u01f2\n\27\3\30\3\30\3\30\3\30\7\30\u01f8\n\30\f\30")
        buf.write("\16\30\u01fb\13\30\3\30\3\30\3\31\7\31\u0200\n\31\f\31")
        buf.write("\16\31\u0203\13\31\3\32\3\32\3\32\3\32\5\32\u0209\n\32")
        buf.write("\3\32\3\32\3\32\7\32\u020e\n\32\f\32\16\32\u0211\13\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0227")
        buf.write("\n\33\3\34\3\34\3\34\7\34\u022c\n\34\f\34\16\34\u022f")
        buf.write("\13\34\3\35\3\35\3\35\7\35\u0234\n\35\f\35\16\35\u0237")
        buf.write("\13\35\3\36\3\36\3\36\3\36\3\37\7\37\u023e\n\37\f\37\16")
        buf.write("\37\u0241\13\37\3 \3 \3 \5 \u0246\n \3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\5!\u0263\n!\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3")
        buf.write("$\7$\u026f\n$\f$\16$\u0272\13$\3$\5$\u0275\n$\3$\3$\3")
        buf.write("$\3$\3$\7$\u027c\n$\f$\16$\u027f\13$\3$\5$\u0282\n$\3")
        buf.write("$\3$\3$\5$\u0287\n$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'")
        buf.write("\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\5)\u02a1\n)\3")
        buf.write("*\3*\3*\3*\3*\3*\3+\3+\3+\5+\u02ac\n+\3+\3+\5+\u02b0\n")
        buf.write("+\3+\3+\5+\u02b4\n+\3+\3+\3+\3+\3+\3+\3+\5+\u02bd\n+\3")
        buf.write(",\3,\3-\3-\3.\3.\3.\3.\5.\u02c7\n.\3.\7.\u02ca\n.\f.\16")
        buf.write(".\u02cd\13.\3.\3.\3.\5.\u02d2\n.\3.\7.\u02d5\n.\f.\16")
        buf.write(".\u02d8\13.\3.\3.\5.\u02dc\n.\3/\3/\3/\5/\u02e1\n/\3/")
        buf.write("\6/\u02e4\n/\r/\16/\u02e5\3/\3/\3\60\3\60\5\60\u02ec\n")
        buf.write("\60\3\60\3\60\3\61\3\61\5\61\u02f2\n\61\3\61\3\61\3\62")
        buf.write("\3\62\5\62\u02f8\n\62\3\62\3\62\3\63\3\63\3\63\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\5\65")
        buf.write("\u030a\n\65\3\65\3\65\3\65\5\65\u030f\n\65\3\65\5\65\u0312")
        buf.write("\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u031c")
        buf.write("\n\65\3\65\5\65\u031f\n\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\5\65\u032c\n\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\5\65\u0334\n\65\3\66\3\66\3\66\6")
        buf.write("\66\u0339\n\66\r\66\16\66\u033a\3\66\5\66\u033e\n\66\3")
        buf.write("\66\7\66\u0341\n\66\f\66\16\66\u0344\13\66\3\66\5\66\u0347")
        buf.write("\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\38\38\38\39\3")
        buf.write("9\39\39\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0365")
        buf.write("\n;\3<\6<\u0368\n<\r<\16<\u0369\3=\3=\5=\u036e\n=\3>\3")
        buf.write(">\3>\7>\u0373\n>\f>\16>\u0376\13>\3?\5?\u0379\n?\3?\3")
        buf.write("?\7?\u037d\n?\f?\16?\u0380\13?\3@\3@\5@\u0384\n@\3@\5")
        buf.write("@\u0387\n@\3@\5@\u038a\n@\3@\3@\3A\3A\3A\5A\u0391\nA\3")
        buf.write("B\3B\3B\3B\7B\u0397\nB\fB\16B\u039a\13B\3B\3B\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\5C\u03a6\nC\3D\3D\3D\3D\3E\3E\3E\3E\7")
        buf.write("E\u03b0\nE\fE\16E\u03b3\13E\3E\3E\3F\3F\3F\3F\3F\7F\u03bc")
        buf.write("\nF\fF\16F\u03bf\13F\3F\3F\3F\3F\3F\3F\3F\7F\u03c8\nF")
        buf.write("\fF\16F\u03cb\13F\3F\3F\3F\3F\5F\u03d1\nF\3F\3F\5F\u03d5")
        buf.write("\nF\3F\3F\5F\u03d9\nF\3F\3F\3F\3F\5F\u03df\nF\3F\3F\3")
        buf.write("F\3F\3F\3F\5F\u03e7\nF\3G\3G\3G\7G\u03ec\nG\fG\16G\u03ef")
        buf.write("\13G\3G\5G\u03f2\nG\3H\3H\5H\u03f6\nH\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3J\3J\3J\3J\5J\u0403\nJ\3J\5J\u0406\nJ\3J\3J\3K\3")
        buf.write("K\3K\5K\u040d\nK\3K\3K\3L\3L\3L\3L\3M\3M\5M\u0417\nM\3")
        buf.write("N\3N\5N\u041b\nN\3O\6O\u041e\nO\rO\16O\u041f\3P\3P\3P")
        buf.write("\5P\u0425\nP\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\7R\u0430\nR\f")
        buf.write("R\16R\u0433\13R\3R\3R\3S\3S\3S\7S\u043a\nS\fS\16S\u043d")
        buf.write("\13S\3T\3T\3T\5T\u0442\nT\3T\3T\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0468\nU\3U\3U\3U\5U\u046d")
        buf.write("\nU\3U\5U\u0470\nU\3U\3U\3U\3U\5U\u0476\nU\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\5U\u0493\nU\3U\3U\3U\3U\3U\5U\u049a\n")
        buf.write("U\3U\3U\5U\u049e\nU\3U\3U\3U\3U\5U\u04a4\nU\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\5U\u04b1\nU\5U\u04b3\nU\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u04d9")
        buf.write("\nU\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\7U\u04e9")
        buf.write("\nU\fU\16U\u04ec\13U\3V\3V\3V\5V\u04f1\nV\3W\3W\3X\3X")
        buf.write("\3X\3X\5X\u04f9\nX\3Y\3Y\3Y\7Y\u04fe\nY\fY\16Y\u0501\13")
        buf.write("Y\3Y\5Y\u0504\nY\3Z\3Z\3Z\5Z\u0509\nZ\3Z\3Z\3Z\5Z\u050e")
        buf.write("\nZ\3Z\3Z\5Z\u0512\nZ\3[\3[\3[\3[\3[\7[\u0519\n[\f[\16")
        buf.write("[\u051c\13[\3[\3[\3\\\5\\\u0521\n\\\3\\\3\\\3]\3]\5]\u0527")
        buf.write("\n]\3]\5]\u052a\n]\3^\3^\5^\u052e\n^\3^\5^\u0531\n^\3")
        buf.write("^\3^\5^\u0535\n^\3_\3_\3_\7_\u053a\n_\f_\16_\u053d\13")
        buf.write("_\3`\5`\u0540\n`\3`\5`\u0543\n`\3`\3`\3a\3a\3a\7a\u054a")
        buf.write("\na\fa\16a\u054d\13a\3b\3b\3b\7b\u0552\nb\fb\16b\u0555")
        buf.write("\13b\3c\3c\3c\3c\7c\u055b\nc\fc\16c\u055e\13c\3c\5c\u0561")
        buf.write("\nc\3c\3c\3d\5d\u0566\nd\3d\3d\3d\5d\u056b\nd\3e\3e\3")
        buf.write("e\3e\3e\3e\5e\u0573\ne\5e\u0575\ne\3e\3e\3e\3e\5e\u057b")
        buf.write("\ne\5e\u057d\ne\3e\3e\3e\5e\u0582\ne\3f\3f\3f\7f\u0587")
        buf.write("\nf\ff\16f\u058a\13f\3g\3g\3g\5g\u058f\ng\3h\3h\3h\3h")
        buf.write("\3h\5h\u0596\nh\3i\3i\3i\3i\5i\u059c\ni\3j\3j\3k\3k\3")
        buf.write("k\3k\3k\3k\5k\u05a6\nk\3k\3k\5k\u05aa\nk\3k\3k\3k\5k\u05af")
        buf.write("\nk\3l\3l\3m\3m\6m\u05b5\nm\rm\16m\u05b6\3m\3m\6m\u05bb")
        buf.write("\nm\rm\16m\u05bc\3m\3m\3m\7m\u05c2\nm\fm\16m\u05c5\13")
        buf.write("m\3m\5m\u05c8\nm\3n\3n\5n\u05cc\nn\3o\3o\3o\7o\u05d1\n")
        buf.write("o\fo\16o\u05d4\13o\3p\3p\3p\3p\3p\3p\5p\u05dc\np\3p\7")
        buf.write("p\u05df\np\fp\16p\u05e2\13p\3q\3q\3q\5q\u05e7\nq\3r\3")
        buf.write("r\3r\3s\3s\3s\5s\u05ef\ns\3t\5t\u05f2\nt\3t\3t\7t\u05f6")
        buf.write("\nt\ft\16t\u05f9\13t\3u\3u\3u\5u\u05fe\nu\3u\3u\3u\3u")
        buf.write("\5u\u0604\nu\3v\3v\5v\u0608\nv\3w\3w\3w\3w\3w\5w\u060f")
        buf.write("\nw\3w\7w\u0612\nw\fw\16w\u0615\13w\3x\7x\u0618\nx\fx")
        buf.write("\16x\u061b\13x\3x\3x\3x\3x\3x\3x\5x\u0623\nx\3x\7x\u0626")
        buf.write("\nx\fx\16x\u0629\13x\3y\3y\5y\u062d\ny\3y\3y\3y\3y\3y")
        buf.write("\5y\u0634\ny\3z\5z\u0637\nz\3z\3z\5z\u063b\nz\7z\u063d")
        buf.write("\nz\fz\16z\u0640\13z\3{\3{\3{\3{\3{\3{\5{\u0648\n{\3|")
        buf.write("\3|\3}\3}\3~\3~\3\177\3\177\3\u0080\3\u0080\3\u0081\3")
        buf.write("\u0081\3\u0082\3\u0082\3\u0082\2\3\u00a8\u0083\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\2\32\4\299RR\4\2\67\67xx\3\2\u00d1\u00d2\3\2\u00c5\u00c6")
        buf.write("\4\2\u00be\u00be\u00c0\u00c1\3\2\u009d\u009e\3\2XY\3\2")
        buf.write("pq\3\2\u00c2\u00c4\4\2\u00c0\u00c1\u00c8\u00c8\3\2\u00b4")
        buf.write("\u00b5\4\2\u00a3\u00a4\u00ba\u00bb\3\2\u009f\u00a2\5\2")
        buf.write("\u00a5\u00a7\u00a9\u00b1\u00d3\u00d3\3\2\u00c0\u00c1\4")
        buf.write("\2\u00d8\u00d9\u00db\u00dc\4\2\67\67jj\4\2--MM\4\2-\u0099")
        buf.write("\u00d7\u00d7\6\2--MMmott\3\2\u0092\u0099\3\2\u0082\u0091")
        buf.write("\t\2..\61\61??^_iirruu\13\2..\60\61>?OO\\_iirruu{}\2\u06ff")
        buf.write("\2\u0105\3\2\2\2\4\u0112\3\2\2\2\6\u0115\3\2\2\2\b\u0135")
        buf.write("\3\2\2\2\n\u0138\3\2\2\2\f\u013f\3\2\2\2\16\u0147\3\2")
        buf.write("\2\2\20\u0152\3\2\2\2\22\u0154\3\2\2\2\24\u015c\3\2\2")
        buf.write("\2\26\u0169\3\2\2\2\30\u016e\3\2\2\2\32\u0184\3\2\2\2")
        buf.write("\34\u0186\3\2\2\2\36\u0194\3\2\2\2 \u01bf\3\2\2\2\"\u01c1")
        buf.write("\3\2\2\2$\u01d7\3\2\2\2&\u01d9\3\2\2\2(\u01e1\3\2\2\2")
        buf.write("*\u01e9\3\2\2\2,\u01ec\3\2\2\2.\u01f3\3\2\2\2\60\u0201")
        buf.write("\3\2\2\2\62\u0204\3\2\2\2\64\u0226\3\2\2\2\66\u0228\3")
        buf.write("\2\2\28\u0230\3\2\2\2:\u0238\3\2\2\2<\u023f\3\2\2\2>\u0245")
        buf.write("\3\2\2\2@\u0262\3\2\2\2B\u0264\3\2\2\2D\u0266\3\2\2\2")
        buf.write("F\u0286\3\2\2\2H\u0288\3\2\2\2J\u028c\3\2\2\2L\u0291\3")
        buf.write("\2\2\2N\u0294\3\2\2\2P\u0298\3\2\2\2R\u02a2\3\2\2\2T\u02a8")
        buf.write("\3\2\2\2V\u02be\3\2\2\2X\u02c0\3\2\2\2Z\u02c2\3\2\2\2")
        buf.write("\\\u02e3\3\2\2\2^\u02e9\3\2\2\2`\u02ef\3\2\2\2b\u02f5")
        buf.write("\3\2\2\2d\u02fb\3\2\2\2f\u02fe\3\2\2\2h\u0304\3\2\2\2")
        buf.write("j\u0335\3\2\2\2l\u0348\3\2\2\2n\u034f\3\2\2\2p\u0352\3")
        buf.write("\2\2\2r\u0356\3\2\2\2t\u035a\3\2\2\2v\u0367\3\2\2\2x\u036d")
        buf.write("\3\2\2\2z\u036f\3\2\2\2|\u0378\3\2\2\2~\u0381\3\2\2\2")
        buf.write("\u0080\u0390\3\2\2\2\u0082\u0392\3\2\2\2\u0084\u03a5\3")
        buf.write("\2\2\2\u0086\u03a7\3\2\2\2\u0088\u03ab\3\2\2\2\u008a\u03e6")
        buf.write("\3\2\2\2\u008c\u03f1\3\2\2\2\u008e\u03f5\3\2\2\2\u0090")
        buf.write("\u03f7\3\2\2\2\u0092\u03fe\3\2\2\2\u0094\u040c\3\2\2\2")
        buf.write("\u0096\u0410\3\2\2\2\u0098\u0416\3\2\2\2\u009a\u041a\3")
        buf.write("\2\2\2\u009c\u041d\3\2\2\2\u009e\u0421\3\2\2\2\u00a0\u0426")
        buf.write("\3\2\2\2\u00a2\u042a\3\2\2\2\u00a4\u0436\3\2\2\2\u00a6")
        buf.write("\u043e\3\2\2\2\u00a8\u04b2\3\2\2\2\u00aa\u04ed\3\2\2\2")
        buf.write("\u00ac\u04f2\3\2\2\2\u00ae\u04f4\3\2\2\2\u00b0\u04fa\3")
        buf.write("\2\2\2\u00b2\u0511\3\2\2\2\u00b4\u0513\3\2\2\2\u00b6\u0520")
        buf.write("\3\2\2\2\u00b8\u0529\3\2\2\2\u00ba\u0534\3\2\2\2\u00bc")
        buf.write("\u0536\3\2\2\2\u00be\u053f\3\2\2\2\u00c0\u0546\3\2\2\2")
        buf.write("\u00c2\u054e\3\2\2\2\u00c4\u0556\3\2\2\2\u00c6\u056a\3")
        buf.write("\2\2\2\u00c8\u0581\3\2\2\2\u00ca\u0583\3\2\2\2\u00cc\u058b")
        buf.write("\3\2\2\2\u00ce\u0595\3\2\2\2\u00d0\u059b\3\2\2\2\u00d2")
        buf.write("\u059d\3\2\2\2\u00d4\u05ae\3\2\2\2\u00d6\u05b0\3\2\2\2")
        buf.write("\u00d8\u05c7\3\2\2\2\u00da\u05cb\3\2\2\2\u00dc\u05cd\3")
        buf.write("\2\2\2\u00de\u05db\3\2\2\2\u00e0\u05e3\3\2\2\2\u00e2\u05e8")
        buf.write("\3\2\2\2\u00e4\u05ee\3\2\2\2\u00e6\u05f1\3\2\2\2\u00e8")
        buf.write("\u0603\3\2\2\2\u00ea\u0607\3\2\2\2\u00ec\u060e\3\2\2\2")
        buf.write("\u00ee\u0619\3\2\2\2\u00f0\u0633\3\2\2\2\u00f2\u0636\3")
        buf.write("\2\2\2\u00f4\u0647\3\2\2\2\u00f6\u0649\3\2\2\2\u00f8\u064b")
        buf.write("\3\2\2\2\u00fa\u064d\3\2\2\2\u00fc\u064f\3\2\2\2\u00fe")
        buf.write("\u0651\3\2\2\2\u0100\u0653\3\2\2\2\u0102\u0655\3\2\2\2")
        buf.write("\u0104\u0106\7\f\2\2\u0105\u0104\3\2\2\2\u0105\u0106\3")
        buf.write("\2\2\2\u0106\u010a\3\2\2\2\u0107\u0109\5\4\3\2\u0108\u0107")
        buf.write("\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\u010d\3\2\2\2\u010c\u010a\3\2\2\2")
        buf.write("\u010d\u010e\7\2\2\3\u010e\3\3\2\2\2\u010f\u0113\5\6\4")
        buf.write("\2\u0110\u0113\5\f\7\2\u0111\u0113\5\n\6\2\u0112\u010f")
        buf.write("\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0111\3\2\2\2\u0113")
        buf.write("\5\3\2\2\2\u0114\u0116\5\b\5\2\u0115\u0114\3\2\2\2\u0116")
        buf.write("\u0117\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\7\3\2\2\2\u0119\u0136\7\n\2\2\u011a\u0136\7\7\2")
        buf.write("\2\u011b\u0136\7\21\2\2\u011c\u0136\7\b\2\2\u011d\u0136")
        buf.write("\7\13\2\2\u011e\u0136\7\32\2\2\u011f\u0136\7\22\2\2\u0120")
        buf.write("\u0136\7\23\2\2\u0121\u0136\7\4\2\2\u0122\u0136\7\24\2")
        buf.write("\2\u0123\u0136\7\25\2\2\u0124\u0136\7\35\2\2\u0125\u0136")
        buf.write("\7\26\2\2\u0126\u0136\7!\2\2\u0127\u0136\7\27\2\2\u0128")
        buf.write("\u0136\7\30\2\2\u0129\u0136\7\36\2\2\u012a\u0136\7\"\2")
        buf.write("\2\u012b\u0136\7\'\2\2\u012c\u0136\7%\2\2\u012d\u0131")
        buf.write("\7\5\2\2\u012e\u0130\7\16\2\2\u012f\u012e\3\2\2\2\u0130")
        buf.write("\u0133\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2\2")
        buf.write("\u0132\u0134\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u0136\7")
        buf.write("\17\2\2\u0135\u0119\3\2\2\2\u0135\u011a\3\2\2\2\u0135")
        buf.write("\u011b\3\2\2\2\u0135\u011c\3\2\2\2\u0135\u011d\3\2\2\2")
        buf.write("\u0135\u011e\3\2\2\2\u0135\u011f\3\2\2\2\u0135\u0120\3")
        buf.write("\2\2\2\u0135\u0121\3\2\2\2\u0135\u0122\3\2\2\2\u0135\u0123")
        buf.write("\3\2\2\2\u0135\u0124\3\2\2\2\u0135\u0125\3\2\2\2\u0135")
        buf.write("\u0126\3\2\2\2\u0135\u0127\3\2\2\2\u0135\u0128\3\2\2\2")
        buf.write("\u0135\u0129\3\2\2\2\u0135\u012a\3\2\2\2\u0135\u012b\3")
        buf.write("\2\2\2\u0135\u012c\3\2\2\2\u0135\u012d\3\2\2\2\u0136\t")
        buf.write("\3\2\2\2\u0137\u0139\7$\2\2\u0138\u0137\3\2\2\2\u0139")
        buf.write("\u013a\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b\3\2\2\2")
        buf.write("\u013b\13\3\2\2\2\u013c\u013e\5\16\b\2\u013d\u013c\3\2")
        buf.write("\2\2\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f\3\2\2\2\u0142")
        buf.write("\u0144\5\20\t\2\u0143\u0142\3\2\2\2\u0144\u0145\3\2\2")
        buf.write("\2\u0145\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146\r\3\2")
        buf.write("\2\2\u0147\u0148\7W\2\2\u0148\u0149\7f\2\2\u0149\u014a")
        buf.write("\5\u00c0a\2\u014a\u014b\7\u00d2\2\2\u014b\17\3\2\2\2\u014c")
        buf.write("\u0153\5@!\2\u014d\u0153\5\22\n\2\u014e\u0153\5\30\r\2")
        buf.write("\u014f\u0153\5\34\17\2\u0150\u0153\5\36\20\2\u0151\u0153")
        buf.write("\5\u00a2R\2\u0152\u014c\3\2\2\2\u0152\u014d\3\2\2\2\u0152")
        buf.write("\u014e\3\2\2\2\u0152\u014f\3\2\2\2\u0152\u0150\3\2\2\2")
        buf.write("\u0152\u0151\3\2\2\2\u0153\21\3\2\2\2\u0154\u0156\7~\2")
        buf.write("\2\u0155\u0157\t\2\2\2\u0156\u0155\3\2\2\2\u0156\u0157")
        buf.write("\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\5\24\13\2\u0159")
        buf.write("\u015a\7\u00d2\2\2\u015a\23\3\2\2\2\u015b\u015d\7\u00b8")
        buf.write("\2\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015e")
        buf.write("\3\2\2\2\u015e\u0166\5\26\f\2\u015f\u0161\7\u00d0\2\2")
        buf.write("\u0160\u0162\7\u00b8\2\2\u0161\u0160\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0165\5\26\f\2\u0164")
        buf.write("\u015f\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2")
        buf.write("\u0166\u0167\3\2\2\2\u0167\25\3\2\2\2\u0168\u0166\3\2")
        buf.write("\2\2\u0169\u016c\5\u00c0a\2\u016a\u016b\7/\2\2\u016b\u016d")
        buf.write("\5\u00f8}\2\u016c\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d")
        buf.write("\27\3\2\2\2\u016e\u017d\7f\2\2\u016f\u0171\5\u00c0a\2")
        buf.write("\u0170\u016f\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\3")
        buf.write("\2\2\2\u0172\u0176\7\u00ce\2\2\u0173\u0175\5\32\16\2\u0174")
        buf.write("\u0173\3\2\2\2\u0175\u0178\3\2\2\2\u0176\u0174\3\2\2\2")
        buf.write("\u0176\u0177\3\2\2\2\u0177\u0179\3\2\2\2\u0178\u0176\3")
        buf.write("\2\2\2\u0179\u017e\7\u00cf\2\2\u017a\u017b\5\u00c0a\2")
        buf.write("\u017b\u017c\7\u00d2\2\2\u017c\u017e\3\2\2\2\u017d\u0170")
        buf.write("\3\2\2\2\u017d\u017a\3\2\2\2\u017e\31\3\2\2\2\u017f\u0185")
        buf.write("\5@!\2\u0180\u0185\5\22\n\2\u0181\u0185\5\34\17\2\u0182")
        buf.write("\u0185\5\36\20\2\u0183\u0185\5\u00a2R\2\u0184\u017f\3")
        buf.write("\2\2\2\u0184\u0180\3\2\2\2\u0184\u0181\3\2\2\2\u0184\u0182")
        buf.write("\3\2\2\2\u0184\u0183\3\2\2\2\u0185\33\3\2\2\2\u0186\u0187")
        buf.write("\5\60\31\2\u0187\u0189\7R\2\2\u0188\u018a\7\u00bc\2\2")
        buf.write("\u0189\u0188\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018b\3")
        buf.write("\2\2\2\u018b\u018d\5\u00f8}\2\u018c\u018e\5$\23\2\u018d")
        buf.write("\u018c\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f\3\2\2\2")
        buf.write("\u018f\u0190\7\u00ca\2\2\u0190\u0191\5|?\2\u0191\u0192")
        buf.write("\7\u00cb\2\2\u0192\u0193\5D#\2\u0193\35\3\2\2\2\u0194")
        buf.write("\u0196\5\60\31\2\u0195\u0197\7m\2\2\u0196\u0195\3\2\2")
        buf.write("\2\u0196\u0197\3\2\2\2\u0197\u0199\3\2\2\2\u0198\u019a")
        buf.write("\5\u00f6|\2\u0199\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a")
        buf.write("\u019c\3\2\2\2\u019b\u019d\7k\2\2\u019c\u019b\3\2\2\2")
        buf.write("\u019c\u019d\3\2\2\2\u019d\u01b4\3\2\2\2\u019e\u019f\5")
        buf.write(" \21\2\u019f\u01a1\5\u00f8}\2\u01a0\u01a2\5$\23\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a5\3\2\2\2")
        buf.write("\u01a3\u01a4\7L\2\2\u01a4\u01a6\5\u00b8]\2\u01a5\u01a3")
        buf.write("\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7")
        buf.write("\u01a8\7V\2\2\u01a8\u01aa\5\"\22\2\u01a9\u01a7\3\2\2\2")
        buf.write("\u01a9\u01aa\3\2\2\2\u01aa\u01b5\3\2\2\2\u01ab\u01ac\7")
        buf.write("`\2\2\u01ac\u01ae\5\u00f8}\2\u01ad\u01af\5$\23\2\u01ae")
        buf.write("\u01ad\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b2\3\2\2\2")
        buf.write("\u01b0\u01b1\7L\2\2\u01b1\u01b3\5\"\22\2\u01b2\u01b0\3")
        buf.write("\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u019e")
        buf.write("\3\2\2\2\u01b4\u01ab\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write("\u01ba\7\u00ce\2\2\u01b7\u01b9\5\u008aF\2\u01b8\u01b7")
        buf.write("\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba")
        buf.write("\u01bb\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ba\3\2\2\2")
        buf.write("\u01bd\u01be\7\u00cf\2\2\u01be\37\3\2\2\2\u01bf\u01c0")
        buf.write("\t\3\2\2\u01c0!\3\2\2\2\u01c1\u01c6\5\u00b8]\2\u01c2\u01c3")
        buf.write("\7\u00d0\2\2\u01c3\u01c5\5\u00b8]\2\u01c4\u01c2\3\2\2")
        buf.write("\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7")
        buf.write("\3\2\2\2\u01c7#\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\u01ca")
        buf.write("\7\u009a\2\2\u01ca\u01cb\5&\24\2\u01cb\u01cc\7\u009b\2")
        buf.write("\2\u01cc\u01d8\3\2\2\2\u01cd\u01ce\7\u009a\2\2\u01ce\u01cf")
        buf.write("\5(\25\2\u01cf\u01d0\7\u009b\2\2\u01d0\u01d8\3\2\2\2\u01d1")
        buf.write("\u01d2\7\u009a\2\2\u01d2\u01d3\5&\24\2\u01d3\u01d4\7\u00d0")
        buf.write("\2\2\u01d4\u01d5\5(\25\2\u01d5\u01d6\7\u009b\2\2\u01d6")
        buf.write("\u01d8\3\2\2\2\u01d7\u01c9\3\2\2\2\u01d7\u01cd\3\2\2\2")
        buf.write("\u01d7\u01d1\3\2\2\2\u01d8%\3\2\2\2\u01d9\u01de\5*\26")
        buf.write("\2\u01da\u01db\7\u00d0\2\2\u01db\u01dd\5*\26\2\u01dc\u01da")
        buf.write("\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01dc\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\'\3\2\2\2\u01e0\u01de\3\2\2\2\u01e1")
        buf.write("\u01e6\5,\27\2\u01e2\u01e3\7\u00d0\2\2\u01e3\u01e5\5,")
        buf.write("\27\2\u01e4\u01e2\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e4")
        buf.write("\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7)\3\2\2\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e9\u01ea\5\60\31\2\u01ea\u01eb\5\u00f8}\2")
        buf.write("\u01eb+\3\2\2\2\u01ec\u01ed\5\60\31\2\u01ed\u01ee\5\u00f8")
        buf.write("}\2\u01ee\u01f1\7\u00d3\2\2\u01ef\u01f2\5\u00b8]\2\u01f0")
        buf.write("\u01f2\5\u0100\u0081\2\u01f1\u01ef\3\2\2\2\u01f1\u01f0")
        buf.write("\3\2\2\2\u01f2-\3\2\2\2\u01f3\u01f4\7\u009a\2\2\u01f4")
        buf.write("\u01f9\5\u00ba^\2\u01f5\u01f6\7\u00d0\2\2\u01f6\u01f8")
        buf.write("\5\u00ba^\2\u01f7\u01f5\3\2\2\2\u01f8\u01fb\3\2\2\2\u01f9")
        buf.write("\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc\3\2\2\2")
        buf.write("\u01fb\u01f9\3\2\2\2\u01fc\u01fd\7\u009b\2\2\u01fd/\3")
        buf.write("\2\2\2\u01fe\u0200\5\62\32\2\u01ff\u01fe\3\2\2\2\u0200")
        buf.write("\u0203\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3\2\2\2")
        buf.write("\u0202\61\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u0208\7\u00cc")
        buf.write("\2\2\u0205\u0206\5\u00f8}\2\u0206\u0207\7\u00d1\2\2\u0207")
        buf.write("\u0209\3\2\2\2\u0208\u0205\3\2\2\2\u0208\u0209\3\2\2\2")
        buf.write("\u0209\u020a\3\2\2\2\u020a\u020f\5\64\33\2\u020b\u020c")
        buf.write("\7\u00d0\2\2\u020c\u020e\5\64\33\2\u020d\u020b\3\2\2\2")
        buf.write("\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3")
        buf.write("\2\2\2\u0210\u0212\3\2\2\2\u0211\u020f\3\2\2\2\u0212\u0213")
        buf.write("\7\u00cd\2\2\u0213\63\3\2\2\2\u0214\u0227\5\u00be`\2\u0215")
        buf.write("\u0216\5\u00be`\2\u0216\u0217\7\u00ca\2\2\u0217\u0218")
        buf.write("\5\66\34\2\u0218\u0219\7\u00cb\2\2\u0219\u0227\3\2\2\2")
        buf.write("\u021a\u021b\5\u00be`\2\u021b\u021c\7\u00ca\2\2\u021c")
        buf.write("\u021d\58\35\2\u021d\u021e\7\u00cb\2\2\u021e\u0227\3\2")
        buf.write("\2\2\u021f\u0220\5\u00be`\2\u0220\u0221\7\u00ca\2\2\u0221")
        buf.write("\u0222\5\66\34\2\u0222\u0223\7\u00d0\2\2\u0223\u0224\5")
        buf.write("8\35\2\u0224\u0225\7\u00cb\2\2\u0225\u0227\3\2\2\2\u0226")
        buf.write("\u0214\3\2\2\2\u0226\u0215\3\2\2\2\u0226\u021a\3\2\2\2")
        buf.write("\u0226\u021f\3\2\2\2\u0227\65\3\2\2\2\u0228\u022d\5\u00a8")
        buf.write("U\2\u0229\u022a\7\u00d0\2\2\u022a\u022c\5\u00a8U\2\u022b")
        buf.write("\u0229\3\2\2\2\u022c\u022f\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\67\3\2\2\2\u022f\u022d\3\2")
        buf.write("\2\2\u0230\u0235\5:\36\2\u0231\u0232\7\u00d0\2\2\u0232")
        buf.write("\u0234\5:\36\2\u0233\u0231\3\2\2\2\u0234\u0237\3\2\2\2")
        buf.write("\u0235\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u02369\3\2\2")
        buf.write("\2\u0237\u0235\3\2\2\2\u0238\u0239\7\u00d6\2\2\u0239\u023a")
        buf.write("\7\u009c\2\2\u023a\u023b\5\u00a8U\2\u023b;\3\2\2\2\u023c")
        buf.write("\u023e\5> \2\u023d\u023c\3\2\2\2\u023e\u0241\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240=\3\2\2\2\u0241")
        buf.write("\u023f\3\2\2\2\u0242\u0246\5@!\2\u0243\u0246\5\34\17\2")
        buf.write("\u0244\u0246\5\36\20\2\u0245\u0242\3\2\2\2\u0245\u0243")
        buf.write("\3\2\2\2\u0245\u0244\3\2\2\2\u0246?\3\2\2\2\u0247\u0248")
        buf.write("\5\u00f8}\2\u0248\u0249\7\u00d1\2\2\u0249\u0263\3\2\2")
        buf.write("\2\u024a\u0263\5D#\2\u024b\u0263\5F$\2\u024c\u0263\5P")
        buf.write(")\2\u024d\u0263\5R*\2\u024e\u0263\5T+\2\u024f\u0263\5")
        buf.write("Z.\2\u0250\u0263\5^\60\2\u0251\u0263\5`\61\2\u0252\u0263")
        buf.write("\5b\62\2\u0253\u0254\5\u00aeX\2\u0254\u0255\7\u00d2\2")
        buf.write("\2\u0255\u0263\3\2\2\2\u0256\u0263\5\u0082B\2\u0257\u0263")
        buf.write("\5\u0088E\2\u0258\u0263\5\u0086D\2\u0259\u0263\5d\63\2")
        buf.write("\u025a\u0263\5f\64\2\u025b\u0263\5h\65\2\u025c\u0263\5")
        buf.write("j\66\2\u025d\u0263\5p9\2\u025e\u0263\5r:\2\u025f\u0263")
        buf.write("\5t;\2\u0260\u0263\5B\"\2\u0261\u0263\5v<\2\u0262\u0247")
        buf.write("\3\2\2\2\u0262\u024a\3\2\2\2\u0262\u024b\3\2\2\2\u0262")
        buf.write("\u024c\3\2\2\2\u0262\u024d\3\2\2\2\u0262\u024e\3\2\2\2")
        buf.write("\u0262\u024f\3\2\2\2\u0262\u0250\3\2\2\2\u0262\u0251\3")
        buf.write("\2\2\2\u0262\u0252\3\2\2\2\u0262\u0253\3\2\2\2\u0262\u0256")
        buf.write("\3\2\2\2\u0262\u0257\3\2\2\2\u0262\u0258\3\2\2\2\u0262")
        buf.write("\u0259\3\2\2\2\u0262\u025a\3\2\2\2\u0262\u025b\3\2\2\2")
        buf.write("\u0262\u025c\3\2\2\2\u0262\u025d\3\2\2\2\u0262\u025e\3")
        buf.write("\2\2\2\u0262\u025f\3\2\2\2\u0262\u0260\3\2\2\2\u0262\u0261")
        buf.write("\3\2\2\2\u0263A\3\2\2\2\u0264\u0265\7\u00d2\2\2\u0265")
        buf.write("C\3\2\2\2\u0266\u0267\7\u00ce\2\2\u0267\u0268\5<\37\2")
        buf.write("\u0268\u0269\7\u00cf\2\2\u0269E\3\2\2\2\u026a\u026b\7")
        buf.write("U\2\2\u026b\u026c\5\u00a6T\2\u026c\u0270\5@!\2\u026d\u026f")
        buf.write("\5H%\2\u026e\u026d\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e")
        buf.write("\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0274\3\2\2\2\u0272")
        buf.write("\u0270\3\2\2\2\u0273\u0275\5L\'\2\u0274\u0273\3\2\2\2")
        buf.write("\u0274\u0275\3\2\2\2\u0275\u0287\3\2\2\2\u0276\u0277\7")
        buf.write("U\2\2\u0277\u0278\5\u00a6T\2\u0278\u0279\7\u00d1\2\2\u0279")
        buf.write("\u027d\5<\37\2\u027a\u027c\5J&\2\u027b\u027a\3\2\2\2\u027c")
        buf.write("\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d\u027e\3\2\2\2")
        buf.write("\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2\u0280\u0282\5")
        buf.write("N(\2\u0281\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283")
        buf.write("\3\2\2\2\u0283\u0284\7G\2\2\u0284\u0285\7\u00d2\2\2\u0285")
        buf.write("\u0287\3\2\2\2\u0286\u026a\3\2\2\2\u0286\u0276\3\2\2\2")
        buf.write("\u0287G\3\2\2\2\u0288\u0289\7B\2\2\u0289\u028a\5\u00a6")
        buf.write("T\2\u028a\u028b\5@!\2\u028bI\3\2\2\2\u028c\u028d\7B\2")
        buf.write("\2\u028d\u028e\5\u00a6T\2\u028e\u028f\7\u00d1\2\2\u028f")
        buf.write("\u0290\5<\37\2\u0290K\3\2\2\2\u0291\u0292\7A\2\2\u0292")
        buf.write("\u0293\5@!\2\u0293M\3\2\2\2\u0294\u0295\7A\2\2\u0295\u0296")
        buf.write("\7\u00d1\2\2\u0296\u0297\5<\37\2\u0297O\3\2\2\2\u0298")
        buf.write("\u0299\7\u0080\2\2\u0299\u02a0\5\u00a6T\2\u029a\u02a1")
        buf.write("\5@!\2\u029b\u029c\7\u00d1\2\2\u029c\u029d\5<\37\2\u029d")
        buf.write("\u029e\7I\2\2\u029e\u029f\7\u00d2\2\2\u029f\u02a1\3\2")
        buf.write("\2\2\u02a0\u029a\3\2\2\2\u02a0\u029b\3\2\2\2\u02a1Q\3")
        buf.write("\2\2\2\u02a2\u02a3\7=\2\2\u02a3\u02a4\5@!\2\u02a4\u02a5")
        buf.write("\7\u0080\2\2\u02a5\u02a6\5\u00a6T\2\u02a6\u02a7\7\u00d2")
        buf.write("\2\2\u02a7S\3\2\2\2\u02a8\u02a9\7P\2\2\u02a9\u02ab\7\u00ca")
        buf.write("\2\2\u02aa\u02ac\5V,\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac")
        buf.write("\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02af\7\u00d2\2\2\u02ae")
        buf.write("\u02b0\5\u00a4S\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2")
        buf.write("\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b3\7\u00d2\2\2\u02b2")
        buf.write("\u02b4\5X-\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4")
        buf.write("\u02b5\3\2\2\2\u02b5\u02bc\7\u00cb\2\2\u02b6\u02bd\5@")
        buf.write("!\2\u02b7\u02b8\7\u00d1\2\2\u02b8\u02b9\5<\37\2\u02b9")
        buf.write("\u02ba\7E\2\2\u02ba\u02bb\7\u00d2\2\2\u02bb\u02bd\3\2")
        buf.write("\2\2\u02bc\u02b6\3\2\2\2\u02bc\u02b7\3\2\2\2\u02bdU\3")
        buf.write("\2\2\2\u02be\u02bf\5\u00a4S\2\u02bfW\3\2\2\2\u02c0\u02c1")
        buf.write("\5\u00a4S\2\u02c1Y\3\2\2\2\u02c2\u02c3\7v\2\2\u02c3\u02db")
        buf.write("\5\u00a6T\2\u02c4\u02c6\7\u00ce\2\2\u02c5\u02c7\7\u00d2")
        buf.write("\2\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02cb")
        buf.write("\3\2\2\2\u02c8\u02ca\5\\/\2\u02c9\u02c8\3\2\2\2\u02ca")
        buf.write("\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc\3\2\2\2")
        buf.write("\u02cc\u02ce\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02dc\7")
        buf.write("\u00cf\2\2\u02cf\u02d1\7\u00d1\2\2\u02d0\u02d2\7\u00d2")
        buf.write("\2\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d6")
        buf.write("\3\2\2\2\u02d3\u02d5\5\\/\2\u02d4\u02d3\3\2\2\2\u02d5")
        buf.write("\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02d9\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02da\7")
        buf.write("H\2\2\u02da\u02dc\7\u00d2\2\2\u02db\u02c4\3\2\2\2\u02db")
        buf.write("\u02cf\3\2\2\2\u02dc[\3\2\2\2\u02dd\u02de\7\65\2\2\u02de")
        buf.write("\u02e1\5\u00a8U\2\u02df\u02e1\7<\2\2\u02e0\u02dd\3\2\2")
        buf.write("\2\u02e0\u02df\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4")
        buf.write("\t\4\2\2\u02e3\u02e0\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5")
        buf.write("\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2")
        buf.write("\u02e7\u02e8\5<\37\2\u02e8]\3\2\2\2\u02e9\u02eb\7\63\2")
        buf.write("\2\u02ea\u02ec\5\u00a8U\2\u02eb\u02ea\3\2\2\2\u02eb\u02ec")
        buf.write("\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee\7\u00d2\2\2\u02ee")
        buf.write("_\3\2\2\2\u02ef\u02f1\7:\2\2\u02f0\u02f2\5\u00a8U\2\u02f1")
        buf.write("\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2")
        buf.write("\u02f3\u02f4\7\u00d2\2\2\u02f4a\3\2\2\2\u02f5\u02f7\7")
        buf.write("s\2\2\u02f6\u02f8\5\u00a8U\2\u02f7\u02f6\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\7\u00d2")
        buf.write("\2\2\u02fac\3\2\2\2\u02fb\u02fc\5\u00a8U\2\u02fc\u02fd")
        buf.write("\7\u00d2\2\2\u02fde\3\2\2\2\u02fe\u02ff\7}\2\2\u02ff\u0300")
        buf.write("\7\u00ca\2\2\u0300\u0301\5\u00dco\2\u0301\u0302\7\u00cb")
        buf.write("\2\2\u0302\u0303\7\u00d2\2\2\u0303g\3\2\2\2\u0304\u032b")
        buf.write("\7Q\2\2\u0305\u0306\7\u00ca\2\2\u0306\u0307\5\u00dep\2")
        buf.write("\u0307\u0309\7/\2\2\u0308\u030a\7\u00bc\2\2\u0309\u0308")
        buf.write("\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b\3\2\2\2\u030b")
        buf.write("\u0311\5\u00dep\2\u030c\u030e\7\u009c\2\2\u030d\u030f")
        buf.write("\7\u00bc\2\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f")
        buf.write("\u0310\3\2\2\2\u0310\u0312\5\u00dep\2\u0311\u030c\3\2")
        buf.write("\2\2\u0311\u0312\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314")
        buf.write("\7\u00cb\2\2\u0314\u032c\3\2\2\2\u0315\u0316\7\u00ca\2")
        buf.write("\2\u0316\u0317\5\u00a8U\2\u0317\u0318\7/\2\2\u0318\u031e")
        buf.write("\5\u00dep\2\u0319\u031b\7\u009c\2\2\u031a\u031c\7\u00bc")
        buf.write("\2\2\u031b\u031a\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031d")
        buf.write("\3\2\2\2\u031d\u031f\5\u00dep\2\u031e\u0319\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321\7\u00cb")
        buf.write("\2\2\u0321\u032c\3\2\2\2\u0322\u0323\7\u00ca\2\2\u0323")
        buf.write("\u0324\5\u00dep\2\u0324\u0325\7/\2\2\u0325\u0326\7b\2")
        buf.write("\2\u0326\u0327\7\u00ca\2\2\u0327\u0328\5\u00f2z\2\u0328")
        buf.write("\u0329\7\u00cb\2\2\u0329\u032a\7\u00cb\2\2\u032a\u032c")
        buf.write("\3\2\2\2\u032b\u0305\3\2\2\2\u032b\u0315\3\2\2\2\u032b")
        buf.write("\u0322\3\2\2\2\u032c\u0333\3\2\2\2\u032d\u0334\5@!\2\u032e")
        buf.write("\u032f\7\u00d1\2\2\u032f\u0330\5<\37\2\u0330\u0331\7F")
        buf.write("\2\2\u0331\u0332\7\u00d2\2\2\u0332\u0334\3\2\2\2\u0333")
        buf.write("\u032d\3\2\2\2\u0333\u032e\3\2\2\2\u0334i\3\2\2\2\u0335")
        buf.write("\u0336\7y\2\2\u0336\u0346\5D#\2\u0337\u0339\5l\67\2\u0338")
        buf.write("\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u0338\3\2\2\2")
        buf.write("\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u033e\5")
        buf.write("n8\2\u033d\u033c\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u0347")
        buf.write("\3\2\2\2\u033f\u0341\5l\67\2\u0340\u033f\3\2\2\2\u0341")
        buf.write("\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343\3\2\2\2")
        buf.write("\u0343\u0345\3\2\2\2\u0344\u0342\3\2\2\2\u0345\u0347\5")
        buf.write("n8\2\u0346\u0338\3\2\2\2\u0346\u0342\3\2\2\2\u0347k\3")
        buf.write("\2\2\2\u0348\u0349\7\66\2\2\u0349\u034a\7\u00ca\2\2\u034a")
        buf.write("\u034b\5\u00b8]\2\u034b\u034c\7\u00d6\2\2\u034c\u034d")
        buf.write("\7\u00cb\2\2\u034d\u034e\5D#\2\u034em\3\2\2\2\u034f\u0350")
        buf.write("\7N\2\2\u0350\u0351\5D#\2\u0351o\3\2\2\2\u0352\u0353\7")
        buf.write("w\2\2\u0353\u0354\5\u00a8U\2\u0354\u0355\7\u00d2\2\2\u0355")
        buf.write("q\3\2\2\2\u0356\u0357\7T\2\2\u0357\u0358\5\u00f8}\2\u0358")
        buf.write("\u0359\7\u00d2\2\2\u0359s\3\2\2\2\u035a\u035b\7;\2\2\u035b")
        buf.write("\u035c\7\u00ca\2\2\u035c\u035d\5z>\2\u035d\u0364\7\u00cb")
        buf.write("\2\2\u035e\u0365\5@!\2\u035f\u0360\7\u00d1\2\2\u0360\u0361")
        buf.write("\5<\37\2\u0361\u0362\7D\2\2\u0362\u0363\7\u00d2\2\2\u0363")
        buf.write("\u0365\3\2\2\2\u0364\u035e\3\2\2\2\u0364\u035f\3\2\2\2")
        buf.write("\u0365u\3\2\2\2\u0366\u0368\5x=\2\u0367\u0366\3\2\2\2")
        buf.write("\u0368\u0369\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3")
        buf.write("\2\2\2\u036aw\3\2\2\2\u036b\u036e\5\6\4\2\u036c\u036e")
        buf.write("\5\n\6\2\u036d\u036b\3\2\2\2\u036d\u036c\3\2\2\2\u036e")
        buf.write("y\3\2\2\2\u036f\u0374\5\u00a0Q\2\u0370\u0371\7\u00d0\2")
        buf.write("\2\u0371\u0373\5\u00a0Q\2\u0372\u0370\3\2\2\2\u0373\u0376")
        buf.write("\3\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("{\3\2\2\2\u0376\u0374\3\2\2\2\u0377\u0379\5~@\2\u0378")
        buf.write("\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037e\3\2\2\2")
        buf.write("\u037a\u037b\7\u00d0\2\2\u037b\u037d\5~@\2\u037c\u037a")
        buf.write("\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037e")
        buf.write("\u037f\3\2\2\2\u037f}\3\2\2\2\u0380\u037e\3\2\2\2\u0381")
        buf.write("\u0383\5\60\31\2\u0382\u0384\5\u0080A\2\u0383\u0382\3")
        buf.write("\2\2\2\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0387")
        buf.write("\7\u00bc\2\2\u0386\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387")
        buf.write("\u0389\3\2\2\2\u0388\u038a\7\u00b9\2\2\u0389\u0388\3\2")
        buf.write("\2\2\u0389\u038a\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c")
        buf.write("\5\u009eP\2\u038c\177\3\2\2\2\u038d\u0391\5\u00b8]\2\u038e")
        buf.write("\u0391\7\64\2\2\u038f\u0391\5\u0100\u0081\2\u0390\u038d")
        buf.write("\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u038f\3\2\2\2\u0391")
        buf.write("\u0081\3\2\2\2\u0392\u0393\7S\2\2\u0393\u0398\5\u0084")
        buf.write("C\2\u0394\u0395\7\u00d0\2\2\u0395\u0397\5\u0084C\2\u0396")
        buf.write("\u0394\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2")
        buf.write("\u0398\u0399\3\2\2\2\u0399\u039b\3\2\2\2\u039a\u0398\3")
        buf.write("\2\2\2\u039b\u039c\7\u00d2\2\2\u039c\u0083\3\2\2\2\u039d")
        buf.write("\u03a6\7\u00d6\2\2\u039e\u039f\7\u00c7\2\2\u039f\u03a6")
        buf.write("\5\u00dep\2\u03a0\u03a1\7\u00c7\2\2\u03a1\u03a2\7\u00ce")
        buf.write("\2\2\u03a2\u03a3\5\u00a8U\2\u03a3\u03a4\7\u00cf\2\2\u03a4")
        buf.write("\u03a6\3\2\2\2\u03a5\u039d\3\2\2\2\u03a5\u039e\3\2\2\2")
        buf.write("\u03a5\u03a0\3\2\2\2\u03a6\u0085\3\2\2\2\u03a7\u03a8\7")
        buf.write("@\2\2\u03a8\u03a9\5\u00a4S\2\u03a9\u03aa\7\u00d2\2\2\u03aa")
        buf.write("\u0087\3\2\2\2\u03ab\u03ac\7t\2\2\u03ac\u03b1\5\u009e")
        buf.write("P\2\u03ad\u03ae\7\u00d0\2\2\u03ae\u03b0\5\u009eP\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b4\3\2\2\2\u03b3\u03b1\3")
        buf.write("\2\2\2\u03b4\u03b5\7\u00d2\2\2\u03b5\u0089\3\2\2\2\u03b6")
        buf.write("\u03b7\5\60\31\2\u03b7\u03b8\5\u009aN\2\u03b8\u03bd\5")
        buf.write("\u009eP\2\u03b9\u03ba\7\u00d0\2\2\u03ba\u03bc\5\u009e")
        buf.write("P\2\u03bb\u03b9\3\2\2\2\u03bc\u03bf\3\2\2\2\u03bd\u03bb")
        buf.write("\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c0\3\2\2\2\u03bf")
        buf.write("\u03bd\3\2\2\2\u03c0\u03c1\7\u00d2\2\2\u03c1\u03e7\3\2")
        buf.write("\2\2\u03c2\u03c3\5\60\31\2\u03c3\u03c4\79\2\2\u03c4\u03c9")
        buf.write("\5\u00a0Q\2\u03c5\u03c6\7\u00d0\2\2\u03c6\u03c8\5\u00a0")
        buf.write("Q\2\u03c7\u03c5\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7")
        buf.write("\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb")
        buf.write("\u03c9\3\2\2\2\u03cc\u03cd\7\u00d2\2\2\u03cd\u03e7\3\2")
        buf.write("\2\2\u03ce\u03d0\5\60\31\2\u03cf\u03d1\5\u009cO\2\u03d0")
        buf.write("\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2")
        buf.write("\u03d2\u03d4\7R\2\2\u03d3\u03d5\7\u00bc\2\2\u03d4\u03d3")
        buf.write("\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6")
        buf.write("\u03d8\5\u00f8}\2\u03d7\u03d9\5$\23\2\u03d8\u03d7\3\2")
        buf.write("\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db")
        buf.write("\7\u00ca\2\2\u03db\u03dc\5|?\2\u03dc\u03de\7\u00cb\2\2")
        buf.write("\u03dd\u03df\5\u0096L\2\u03de\u03dd\3\2\2\2\u03de\u03df")
        buf.write("\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\5\u0098M\2\u03e1")
        buf.write("\u03e7\3\2\2\2\u03e2\u03e3\7~\2\2\u03e3\u03e4\5\u00c2")
        buf.write("b\2\u03e4\u03e5\5\u008cG\2\u03e5\u03e7\3\2\2\2\u03e6\u03b6")
        buf.write("\3\2\2\2\u03e6\u03c2\3\2\2\2\u03e6\u03ce\3\2\2\2\u03e6")
        buf.write("\u03e2\3\2\2\2\u03e7\u008b\3\2\2\2\u03e8\u03f2\7\u00d2")
        buf.write("\2\2\u03e9\u03ed\7\u00ce\2\2\u03ea\u03ec\5\u008eH\2\u03eb")
        buf.write("\u03ea\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2")
        buf.write("\u03ed\u03ee\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03ed\3")
        buf.write("\2\2\2\u03f0\u03f2\7\u00cf\2\2\u03f1\u03e8\3\2\2\2\u03f1")
        buf.write("\u03e9\3\2\2\2\u03f2\u008d\3\2\2\2\u03f3\u03f6\5\u0090")
        buf.write("I\2\u03f4\u03f6\5\u0092J\2\u03f5\u03f3\3\2\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f6\u008f\3\2\2\2\u03f7\u03f8\5\u00be`\2\u03f8")
        buf.write("\u03f9\7\u00b6\2\2\u03f9\u03fa\5\u00f8}\2\u03fa\u03fb")
        buf.write("\7[\2\2\u03fb\u03fc\5\u00c2b\2\u03fc\u03fd\7\u00d2\2\2")
        buf.write("\u03fd\u0091\3\2\2\2\u03fe\u03ff\5\u0094K\2\u03ff\u0405")
        buf.write("\7/\2\2\u0400\u0406\5\u00fa~\2\u0401\u0403\5\u00fa~\2")
        buf.write("\u0402\u0401\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404\3")
        buf.write("\2\2\2\u0404\u0406\5\u00f8}\2\u0405\u0400\3\2\2\2\u0405")
        buf.write("\u0402\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408\7\u00d2")
        buf.write("\2\2\u0408\u0093\3\2\2\2\u0409\u040a\5\u00be`\2\u040a")
        buf.write("\u040b\7\u00b6\2\2\u040b\u040d\3\2\2\2\u040c\u0409\3\2")
        buf.write("\2\2\u040c\u040d\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u040f")
        buf.write("\5\u00f8}\2\u040f\u0095\3\2\2\2\u0410\u0411\7\u00d1\2")
        buf.write("\2\u0411\u0412\5\u00f8}\2\u0412\u0413\5\u00c4c\2\u0413")
        buf.write("\u0097\3\2\2\2\u0414\u0417\7\u00d2\2\2\u0415\u0417\5D")
        buf.write("#\2\u0416\u0414\3\2\2\2\u0416\u0415\3\2\2\2\u0417\u0099")
        buf.write("\3\2\2\2\u0418\u041b\5\u009cO\2\u0419\u041b\7\177\2\2")
        buf.write("\u041a\u0418\3\2\2\2\u041a\u0419\3\2\2\2\u041b\u009b\3")
        buf.write("\2\2\2\u041c\u041e\5\u00fa~\2\u041d\u041c\3\2\2\2\u041e")
        buf.write("\u041f\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2")
        buf.write("\u0420\u009d\3\2\2\2\u0421\u0424\7\u00d6\2\2\u0422\u0423")
        buf.write("\7\u00d3\2\2\u0423\u0425\5\u00c8e\2\u0424\u0422\3\2\2")
        buf.write("\2\u0424\u0425\3\2\2\2\u0425\u009f\3\2\2\2\u0426\u0427")
        buf.write("\5\u00f8}\2\u0427\u0428\7\u00d3\2\2\u0428\u0429\5\u00c8")
        buf.write("e\2\u0429\u00a1\3\2\2\2\u042a\u042b\5\60\31\2\u042b\u042c")
        buf.write("\79\2\2\u042c\u0431\5\u00a0Q\2\u042d\u042e\7\u00d0\2\2")
        buf.write("\u042e\u0430\5\u00a0Q\2\u042f\u042d\3\2\2\2\u0430\u0433")
        buf.write("\3\2\2\2\u0431\u042f\3\2\2\2\u0431\u0432\3\2\2\2\u0432")
        buf.write("\u0434\3\2\2\2\u0433\u0431\3\2\2\2\u0434\u0435\7\u00d2")
        buf.write("\2\2\u0435\u00a3\3\2\2\2\u0436\u043b\5\u00a8U\2\u0437")
        buf.write("\u0438\7\u00d0\2\2\u0438\u043a\5\u00a8U\2\u0439\u0437")
        buf.write("\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043b")
        buf.write("\u043c\3\2\2\2\u043c\u00a5\3\2\2\2\u043d\u043b\3\2\2\2")
        buf.write("\u043e\u0441\7\u00ca\2\2\u043f\u0442\5\u00a8U\2\u0440")
        buf.write("\u0442\5\u00aeX\2\u0441\u043f\3\2\2\2\u0441\u0440\3\2")
        buf.write("\2\2\u0442\u0443\3\2\2\2\u0443\u0444\7\u00cb\2\2\u0444")
        buf.write("\u00a7\3\2\2\2\u0445\u0446\bU\1\2\u0446\u0447\78\2\2\u0447")
        buf.write("\u04b3\5\u00a8U-\u0448\u04b3\5\u00aaV\2\u0449\u044a\5")
        buf.write("\u00d6l\2\u044a\u044b\7\u00cc\2\2\u044b\u044c\5\u00a8")
        buf.write("U\2\u044c\u044d\7\u00cd\2\2\u044d\u04b3\3\2\2\2\u044e")
        buf.write("\u044f\7\u00ca\2\2\u044f\u0450\5\u0102\u0082\2\u0450\u0451")
        buf.write("\7\u00cb\2\2\u0451\u0452\5\u00a8U*\u0452\u04b3\3\2\2\2")
        buf.write("\u0453\u0454\t\5\2\2\u0454\u04b3\5\u00a8U)\u0455\u0456")
        buf.write("\t\6\2\2\u0456\u04b3\5\u00a8U(\u0457\u0458\t\7\2\2\u0458")
        buf.write("\u04b3\5\u00dep\2\u0459\u045a\5\u00dep\2\u045a\u045b\t")
        buf.write("\7\2\2\u045b\u04b3\3\2\2\2\u045c\u045d\7l\2\2\u045d\u04b3")
        buf.write("\5\u00a8U%\u045e\u04b3\5\u00dep\2\u045f\u04b3\5\u00ce")
        buf.write("h\2\u0460\u04b3\5\u00d8m\2\u0461\u04b3\7\u00d7\2\2\u0462")
        buf.write("\u04b3\7\u00dd\2\2\u0463\u04b3\5\u00a6T\2\u0464\u0465")
        buf.write("\7.\2\2\u0465\u0467\7\u00ca\2\2\u0466\u0468\5\u00b0Y\2")
        buf.write("\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3")
        buf.write("\2\2\2\u0469\u0470\7\u00cb\2\2\u046a\u046c\7\u00cc\2\2")
        buf.write("\u046b\u046d\5\u00b0Y\2\u046c\u046b\3\2\2\2\u046c\u046d")
        buf.write("\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470\7\u00cd\2\2\u046f")
        buf.write("\u0464\3\2\2\2\u046f\u046a\3\2\2\2\u0470\u0475\3\2\2\2")
        buf.write("\u0471\u0472\7\u00cc\2\2\u0472\u0473\5\u00a8U\2\u0473")
        buf.write("\u0474\7\u00cd\2\2\u0474\u0476\3\2\2\2\u0475\u0471\3\2")
        buf.write("\2\2\u0475\u0476\3\2\2\2\u0476\u04b3\3\2\2\2\u0477\u04b3")
        buf.write("\7\u0081\2\2\u0478\u0479\7b\2\2\u0479\u047a\7\u00ca\2")
        buf.write("\2\u047a\u047b\5\u00f2z\2\u047b\u047c\7\u00cb\2\2\u047c")
        buf.write("\u047d\7\u00d3\2\2\u047d\u047e\5\u00a8U\34\u047e\u04b3")
        buf.write("\3\2\2\2\u047f\u0480\7a\2\2\u0480\u0481\7\u00ca\2\2\u0481")
        buf.write("\u0482\5\u00dco\2\u0482\u0483\7\u00cb\2\2\u0483\u04b3")
        buf.write("\3\2\2\2\u0484\u0485\7C\2\2\u0485\u0486\7\u00ca\2\2\u0486")
        buf.write("\u0487\5\u00dep\2\u0487\u0488\7\u00cb\2\2\u0488\u04b3")
        buf.write("\3\2\2\2\u0489\u048a\7J\2\2\u048a\u048b\7\u00ca\2\2\u048b")
        buf.write("\u048c\5\u00a8U\2\u048c\u048d\7\u00cb\2\2\u048d\u04b3")
        buf.write("\3\2\2\2\u048e\u0492\7K\2\2\u048f\u0490\7\u00ca\2\2\u0490")
        buf.write("\u0493\7\u00cb\2\2\u0491\u0493\5\u00a6T\2\u0492\u048f")
        buf.write("\3\2\2\2\u0492\u0491\3\2\2\2\u0492\u0493\3\2\2\2\u0493")
        buf.write("\u04b3\3\2\2\2\u0494\u0495\t\b\2\2\u0495\u04b3\5\u00a8")
        buf.write("U\27\u0496\u0497\t\t\2\2\u0497\u04b3\5\u00a8U\26\u0498")
        buf.write("\u049a\7t\2\2\u0499\u0498\3\2\2\2\u0499\u049a\3\2\2\2")
        buf.write("\u049a\u049b\3\2\2\2\u049b\u049d\7R\2\2\u049c\u049e\7")
        buf.write("\u00bc\2\2\u049d\u049c\3\2\2\2\u049d\u049e\3\2\2\2\u049e")
        buf.write("\u049f\3\2\2\2\u049f\u04a0\7\u00ca\2\2\u04a0\u04a1\5|")
        buf.write("?\2\u04a1\u04a3\7\u00cb\2\2\u04a2\u04a4\5\u00b4[\2\u04a3")
        buf.write("\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2")
        buf.write("\u04a5\u04a6\5D#\2\u04a6\u04b3\3\2\2\2\u04a7\u04a8\5\u00de")
        buf.write("p\2\u04a8\u04a9\5\u00acW\2\u04a9\u04aa\5\u00a8U\7\u04aa")
        buf.write("\u04b3\3\2\2\2\u04ab\u04ac\5\u00dep\2\u04ac\u04ad\7\u00d3")
        buf.write("\2\2\u04ad\u04b0\7\u00bc\2\2\u04ae\u04b1\5\u00dep\2\u04af")
        buf.write("\u04b1\5\u00aaV\2\u04b0\u04ae\3\2\2\2\u04b0\u04af\3\2")
        buf.write("\2\2\u04b1\u04b3\3\2\2\2\u04b2\u0445\3\2\2\2\u04b2\u0448")
        buf.write("\3\2\2\2\u04b2\u0449\3\2\2\2\u04b2\u044e\3\2\2\2\u04b2")
        buf.write("\u0453\3\2\2\2\u04b2\u0455\3\2\2\2\u04b2\u0457\3\2\2\2")
        buf.write("\u04b2\u0459\3\2\2\2\u04b2\u045c\3\2\2\2\u04b2\u045e\3")
        buf.write("\2\2\2\u04b2\u045f\3\2\2\2\u04b2\u0460\3\2\2\2\u04b2\u0461")
        buf.write("\3\2\2\2\u04b2\u0462\3\2\2\2\u04b2\u0463\3\2\2\2\u04b2")
        buf.write("\u046f\3\2\2\2\u04b2\u0477\3\2\2\2\u04b2\u0478\3\2\2\2")
        buf.write("\u04b2\u047f\3\2\2\2\u04b2\u0484\3\2\2\2\u04b2\u0489\3")
        buf.write("\2\2\2\u04b2\u048e\3\2\2\2\u04b2\u0494\3\2\2\2\u04b2\u0496")
        buf.write("\3\2\2\2\u04b2\u0499\3\2\2\2\u04b2\u04a7\3\2\2\2\u04b2")
        buf.write("\u04ab\3\2\2\2\u04b3\u04ea\3\2\2\2\u04b4\u04b5\f\24\2")
        buf.write("\2\u04b5\u04b6\7\u00a8\2\2\u04b6\u04e9\5\u00a8U\24\u04b7")
        buf.write("\u04b8\f\22\2\2\u04b8\u04b9\t\n\2\2\u04b9\u04e9\5\u00a8")
        buf.write("U\23\u04ba\u04bb\f\21\2\2\u04bb\u04bc\t\13\2\2\u04bc\u04e9")
        buf.write("\5\u00a8U\22\u04bd\u04be\f\20\2\2\u04be\u04bf\t\f\2\2")
        buf.write("\u04bf\u04e9\5\u00a8U\21\u04c0\u04c1\f\17\2\2\u04c1\u04c2")
        buf.write("\t\r\2\2\u04c2\u04e9\5\u00a8U\20\u04c3\u04c4\f\16\2\2")
        buf.write("\u04c4\u04c5\t\16\2\2\u04c5\u04e9\5\u00a8U\17\u04c6\u04c7")
        buf.write("\f\r\2\2\u04c7\u04c8\7\u00bc\2\2\u04c8\u04e9\5\u00a8U")
        buf.write("\16\u04c9\u04ca\f\f\2\2\u04ca\u04cb\7\u00bf\2\2\u04cb")
        buf.write("\u04e9\5\u00a8U\r\u04cc\u04cd\f\13\2\2\u04cd\u04ce\7\u00bd")
        buf.write("\2\2\u04ce\u04e9\5\u00a8U\f\u04cf\u04d0\f\n\2\2\u04d0")
        buf.write("\u04d1\7\u00b3\2\2\u04d1\u04e9\5\u00a8U\13\u04d2\u04d3")
        buf.write("\f\t\2\2\u04d3\u04d4\7\u00b2\2\2\u04d4\u04e9\5\u00a8U")
        buf.write("\n\u04d5\u04d6\f\b\2\2\u04d6\u04d8\7\u00c9\2\2\u04d7\u04d9")
        buf.write("\5\u00a8U\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9")
        buf.write("\u04da\3\2\2\2\u04da\u04db\7\u00d1\2\2\u04db\u04e9\5\u00a8")
        buf.write("U\t\u04dc\u04dd\f\5\2\2\u04dd\u04de\7c\2\2\u04de\u04e9")
        buf.write("\5\u00a8U\6\u04df\u04e0\f\4\2\2\u04e0\u04e1\7e\2\2\u04e1")
        buf.write("\u04e9\5\u00a8U\5\u04e2\u04e3\f\3\2\2\u04e3\u04e4\7d\2")
        buf.write("\2\u04e4\u04e9\5\u00a8U\4\u04e5\u04e6\f\23\2\2\u04e6\u04e7")
        buf.write("\7Z\2\2\u04e7\u04e9\5\u00ba^\2\u04e8\u04b4\3\2\2\2\u04e8")
        buf.write("\u04b7\3\2\2\2\u04e8\u04ba\3\2\2\2\u04e8\u04bd\3\2\2\2")
        buf.write("\u04e8\u04c0\3\2\2\2\u04e8\u04c3\3\2\2\2\u04e8\u04c6\3")
        buf.write("\2\2\2\u04e8\u04c9\3\2\2\2\u04e8\u04cc\3\2\2\2\u04e8\u04cf")
        buf.write("\3\2\2\2\u04e8\u04d2\3\2\2\2\u04e8\u04d5\3\2\2\2\u04e8")
        buf.write("\u04dc\3\2\2\2\u04e8\u04df\3\2\2\2\u04e8\u04e2\3\2\2\2")
        buf.write("\u04e8\u04e5\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8\3")
        buf.write("\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u00a9\3\2\2\2\u04ec\u04ea")
        buf.write("\3\2\2\2\u04ed\u04ee\7g\2\2\u04ee\u04f0\5\u00ba^\2\u04ef")
        buf.write("\u04f1\5\u00c4c\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3\2")
        buf.write("\2\2\u04f1\u00ab\3\2\2\2\u04f2\u04f3\t\17\2\2\u04f3\u00ad")
        buf.write("\3\2\2\2\u04f4\u04f5\7\u0081\2\2\u04f5\u04f8\5\u00a8U")
        buf.write("\2\u04f6\u04f7\7\u009c\2\2\u04f7\u04f9\5\u00a8U\2\u04f8")
        buf.write("\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u00af\3\2\2\2")
        buf.write("\u04fa\u04ff\5\u00b2Z\2\u04fb\u04fc\7\u00d0\2\2\u04fc")
        buf.write("\u04fe\5\u00b2Z\2\u04fd\u04fb\3\2\2\2\u04fe\u0501\3\2")
        buf.write("\2\2\u04ff\u04fd\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0503")
        buf.write("\3\2\2\2\u0501\u04ff\3\2\2\2\u0502\u0504\7\u00d0\2\2\u0503")
        buf.write("\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u00b1\3\2\2\2")
        buf.write("\u0505\u0508\5\u00a8U\2\u0506\u0507\7\u009c\2\2\u0507")
        buf.write("\u0509\5\u00a8U\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2")
        buf.write("\2\2\u0509\u0512\3\2\2\2\u050a\u050b\5\u00a8U\2\u050b")
        buf.write("\u050c\7\u009c\2\2\u050c\u050e\3\2\2\2\u050d\u050a\3\2")
        buf.write("\2\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510")
        buf.write("\7\u00bc\2\2\u0510\u0512\5\u00dep\2\u0511\u0505\3\2\2")
        buf.write("\2\u0511\u050d\3\2\2\2\u0512\u00b3\3\2\2\2\u0513\u0514")
        buf.write("\7~\2\2\u0514\u0515\7\u00ca\2\2\u0515\u051a\5\u00b6\\")
        buf.write("\2\u0516\u0517\7\u00d0\2\2\u0517\u0519\5\u00b6\\\2\u0518")
        buf.write("\u0516\3\2\2\2\u0519\u051c\3\2\2\2\u051a\u0518\3\2\2\2")
        buf.write("\u051a\u051b\3\2\2\2\u051b\u051d\3\2\2\2\u051c\u051a\3")
        buf.write("\2\2\2\u051d\u051e\7\u00cb\2\2\u051e\u00b5\3\2\2\2\u051f")
        buf.write("\u0521\7\u00bc\2\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2")
        buf.write("\2\2\u0521\u0522\3\2\2\2\u0522\u0523\7\u00d6\2\2\u0523")
        buf.write("\u00b7\3\2\2\2\u0524\u0526\5\u00be`\2\u0525\u0527\5.\30")
        buf.write("\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u052a")
        buf.write("\3\2\2\2\u0528\u052a\7t\2\2\u0529\u0524\3\2\2\2\u0529")
        buf.write("\u0528\3\2\2\2\u052a\u00b9\3\2\2\2\u052b\u052e\5\u00be")
        buf.write("`\2\u052c\u052e\5\u00bc_\2\u052d\u052b\3\2\2\2\u052d\u052c")
        buf.write("\3\2\2\2\u052e\u0530\3\2\2\2\u052f\u0531\5.\30\2\u0530")
        buf.write("\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0535\3\2\2\2")
        buf.write("\u0532\u0535\5\u0100\u0081\2\u0533\u0535\7t\2\2\u0534")
        buf.write("\u052d\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0533\3\2\2\2")
        buf.write("\u0535\u00bb\3\2\2\2\u0536\u053b\5\u00e8u\2\u0537\u0538")
        buf.write("\7\u00b7\2\2\u0538\u053a\5\u00eav\2\u0539\u0537\3\2\2")
        buf.write("\2\u053a\u053d\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053c")
        buf.write("\3\2\2\2\u053c\u00bd\3\2\2\2\u053d\u053b\3\2\2\2\u053e")
        buf.write("\u0540\7f\2\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2")
        buf.write("\u0540\u0542\3\2\2\2\u0541\u0543\7\u00b8\2\2\u0542\u0541")
        buf.write("\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0544\3\2\2\2\u0544")
        buf.write("\u0545\5\u00c0a\2\u0545\u00bf\3\2\2\2\u0546\u054b\5\u00f8")
        buf.write("}\2\u0547\u0548\7\u00b8\2\2\u0548\u054a\5\u00f8}\2\u0549")
        buf.write("\u0547\3\2\2\2\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2")
        buf.write("\u054b\u054c\3\2\2\2\u054c\u00c1\3\2\2\2\u054d\u054b\3")
        buf.write("\2\2\2\u054e\u0553\5\u00be`\2\u054f\u0550\7\u00d0\2\2")
        buf.write("\u0550\u0552\5\u00be`\2\u0551\u054f\3\2\2\2\u0552\u0555")
        buf.write("\3\2\2\2\u0553\u0551\3\2\2\2\u0553\u0554\3\2\2\2\u0554")
        buf.write("\u00c3\3\2\2\2\u0555\u0553\3\2\2\2\u0556\u0560\7\u00ca")
        buf.write("\2\2\u0557\u055c\5\u00c6d\2\u0558\u0559\7\u00d0\2\2\u0559")
        buf.write("\u055b\5\u00c6d\2\u055a\u0558\3\2\2\2\u055b\u055e\3\2")
        buf.write("\2\2\u055c\u055a\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u0561")
        buf.write("\3\2\2\2\u055e\u055c\3\2\2\2\u055f\u0561\5\u00aeX\2\u0560")
        buf.write("\u0557\3\2\2\2\u0560\u055f\3\2\2\2\u0560\u0561\3\2\2\2")
        buf.write("\u0561\u0562\3\2\2\2\u0562\u0563\7\u00cb\2\2\u0563\u00c5")
        buf.write("\3\2\2\2\u0564\u0566\7\u00b9\2\2\u0565\u0564\3\2\2\2\u0565")
        buf.write("\u0566\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u056b\5\u00a8")
        buf.write("U\2\u0568\u0569\7\u00bc\2\2\u0569\u056b\5\u00dep\2\u056a")
        buf.write("\u0565\3\2\2\2\u056a\u0568\3\2\2\2\u056b\u00c7\3\2\2\2")
        buf.write("\u056c\u0582\5\u00ceh\2\u056d\u0582\5\u00d8m\2\u056e\u056f")
        buf.write("\7.\2\2\u056f\u0574\7\u00ca\2\2\u0570\u0572\5\u00caf\2")
        buf.write("\u0571\u0573\7\u00d0\2\2\u0572\u0571\3\2\2\2\u0572\u0573")
        buf.write("\3\2\2\2\u0573\u0575\3\2\2\2\u0574\u0570\3\2\2\2\u0574")
        buf.write("\u0575\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0582\7\u00cb")
        buf.write("\2\2\u0577\u057c\7\u00cc\2\2\u0578\u057a\5\u00caf\2\u0579")
        buf.write("\u057b\7\u00d0\2\2\u057a\u0579\3\2\2\2\u057a\u057b\3\2")
        buf.write("\2\2\u057b\u057d\3\2\2\2\u057c\u0578\3\2\2\2\u057c\u057d")
        buf.write("\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0582\7\u00cd\2\2\u057f")
        buf.write("\u0580\t\20\2\2\u0580\u0582\5\u00c8e\2\u0581\u056c\3\2")
        buf.write("\2\2\u0581\u056d\3\2\2\2\u0581\u056e\3\2\2\2\u0581\u0577")
        buf.write("\3\2\2\2\u0581\u057f\3\2\2\2\u0582\u00c9\3\2\2\2\u0583")
        buf.write("\u0588\5\u00ccg\2\u0584\u0585\7\u00d0\2\2\u0585\u0587")
        buf.write("\5\u00ccg\2\u0586\u0584\3\2\2\2\u0587\u058a\3\2\2\2\u0588")
        buf.write("\u0586\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u00cb\3\2\2\2")
        buf.write("\u058a\u0588\3\2\2\2\u058b\u058e\5\u00c8e\2\u058c\u058d")
        buf.write("\7\u009c\2\2\u058d\u058f\5\u00c8e\2\u058e\u058c\3\2\2")
        buf.write("\2\u058e\u058f\3\2\2\2\u058f\u00cd\3\2\2\2\u0590\u0596")
        buf.write("\7h\2\2\u0591\u0596\5\u00d0i\2\u0592\u0596\5\u00fc\177")
        buf.write("\2\u0593\u0596\5\u00d4k\2\u0594\u0596\5\u00be`\2\u0595")
        buf.write("\u0590\3\2\2\2\u0595\u0591\3\2\2\2\u0595\u0592\3\2\2\2")
        buf.write("\u0595\u0593\3\2\2\2\u0595\u0594\3\2\2\2\u0596\u00cf\3")
        buf.write("\2\2\2\u0597\u059c\7\u00da\2\2\u0598\u059c\7\62\2\2\u0599")
        buf.write("\u059c\5\u00d2j\2\u059a\u059c\5\u00d6l\2\u059b\u0597\3")
        buf.write("\2\2\2\u059b\u0598\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059a")
        buf.write("\3\2\2\2\u059c\u00d1\3\2\2\2\u059d\u059e\t\21\2\2\u059e")
        buf.write("\u00d3\3\2\2\2\u059f\u05a0\t\22\2\2\u05a0\u05a5\7\u00b6")
        buf.write("\2\2\u05a1\u05a6\5\u00f8}\2\u05a2\u05a6\7\u0086\2\2\u05a3")
        buf.write("\u05a6\7\u0082\2\2\u05a4\u05a6\7\u0083\2\2\u05a5\u05a1")
        buf.write("\3\2\2\2\u05a5\u05a2\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5")
        buf.write("\u05a4\3\2\2\2\u05a6\u05af\3\2\2\2\u05a7\u05aa\5\u00b8")
        buf.write("]\2\u05a8\u05aa\5\u00eex\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8")
        buf.write("\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac\7\u00b6\2\2\u05ac")
        buf.write("\u05ad\5\u00f8}\2\u05ad\u05af\3\2\2\2\u05ae\u059f\3\2")
        buf.write("\2\2\u05ae\u05a9\3\2\2\2\u05af\u00d5\3\2\2\2\u05b0\u05b1")
        buf.write("\7\u00d7\2\2\u05b1\u00d7\3\2\2\2\u05b2\u05b4\7\u00e1\2")
        buf.write("\2\u05b3\u05b5\7\u00e8\2\2\u05b4\u05b3\3\2\2\2\u05b5\u05b6")
        buf.write("\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7")
        buf.write("\u05c8\3\2\2\2\u05b8\u05ba\7\u00e0\2\2\u05b9\u05bb\7\u00e8")
        buf.write("\2\2\u05ba\u05b9\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05ba")
        buf.write("\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05c8\3\2\2\2\u05be")
        buf.write("\u05c8\7\u00de\2\2\u05bf\u05c3\7\u00df\2\2\u05c0\u05c2")
        buf.write("\5\u00dan\2\u05c1\u05c0\3\2\2\2\u05c2\u05c5\3\2\2\2\u05c3")
        buf.write("\u05c1\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c6\3\2\2\2")
        buf.write("\u05c5\u05c3\3\2\2\2\u05c6\u05c8\7\u00df\2\2\u05c7\u05b2")
        buf.write("\3\2\2\2\u05c7\u05b8\3\2\2\2\u05c7\u05be\3\2\2\2\u05c7")
        buf.write("\u05bf\3\2\2\2\u05c8\u00d9\3\2\2\2\u05c9\u05cc\7\u00e4")
        buf.write("\2\2\u05ca\u05cc\5\u00dep\2\u05cb\u05c9\3\2\2\2\u05cb")
        buf.write("\u05ca\3\2\2\2\u05cc\u00db\3\2\2\2\u05cd\u05d2\5\u00de")
        buf.write("p\2\u05ce\u05cf\7\u00d0\2\2\u05cf\u05d1\5\u00dep\2\u05d0")
        buf.write("\u05ce\3\2\2\2\u05d1\u05d4\3\2\2\2\u05d2\u05d0\3\2\2\2")
        buf.write("\u05d2\u05d3\3\2\2\2\u05d3\u00dd\3\2\2\2\u05d4\u05d2\3")
        buf.write("\2\2\2\u05d5\u05dc\5\u00e8u\2\u05d6\u05dc\5\u00e2r\2\u05d7")
        buf.write("\u05d8\7\u00ca\2\2\u05d8\u05d9\5\u00aaV\2\u05d9\u05da")
        buf.write("\7\u00cb\2\2\u05da\u05dc\3\2\2\2\u05db\u05d5\3\2\2\2\u05db")
        buf.write("\u05d6\3\2\2\2\u05db\u05d7\3\2\2\2\u05dc\u05e0\3\2\2\2")
        buf.write("\u05dd\u05df\5\u00e0q\2\u05de\u05dd\3\2\2\2\u05df\u05e2")
        buf.write("\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1")
        buf.write("\u00df\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e3\u05e4\7\u00b7")
        buf.write("\2\2\u05e4\u05e6\5\u00eav\2\u05e5\u05e7\5\u00e6t\2\u05e6")
        buf.write("\u05e5\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u00e1\3\2\2\2")
        buf.write("\u05e8\u05e9\5\u00e4s\2\u05e9\u05ea\5\u00e6t\2\u05ea\u00e3")
        buf.write("\3\2\2\2\u05eb\u05ef\5\u00be`\2\u05ec\u05ef\5\u00d4k\2")
        buf.write("\u05ed\u05ef\5\u00e8u\2\u05ee\u05eb\3\2\2\2\u05ee\u05ec")
        buf.write("\3\2\2\2\u05ee\u05ed\3\2\2\2\u05ef\u00e5\3\2\2\2\u05f0")
        buf.write("\u05f2\5.\30\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2")
        buf.write("\u05f2\u05f3\3\2\2\2\u05f3\u05f7\5\u00c4c\2\u05f4\u05f6")
        buf.write("\5\u00f0y\2\u05f5\u05f4\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7")
        buf.write("\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u00e7\3\2\2\2")
        buf.write("\u05f9\u05f7\3\2\2\2\u05fa\u05fd\5\u00eex\2\u05fb\u05fc")
        buf.write("\7\u00b6\2\2\u05fc\u05fe\5\u00eex\2\u05fd\u05fb\3\2\2")
        buf.write("\2\u05fd\u05fe\3\2\2\2\u05fe\u0604\3\2\2\2\u05ff\u0600")
        buf.write("\5\u00b8]\2\u0600\u0601\7\u00b6\2\2\u0601\u0602\5\u00ee")
        buf.write("x\2\u0602\u0604\3\2\2\2\u0603\u05fa\3\2\2\2\u0603\u05ff")
        buf.write("\3\2\2\2\u0604\u00e9\3\2\2\2\u0605\u0608\5\u00ecw\2\u0606")
        buf.write("\u0608\5\u00eex\2\u0607\u0605\3\2\2\2\u0607\u0606\3\2")
        buf.write("\2\2\u0608\u00eb\3\2\2\2\u0609\u060f\5\u00f8}\2\u060a")
        buf.write("\u060b\7\u00ce\2\2\u060b\u060c\5\u00a8U\2\u060c\u060d")
        buf.write("\7\u00cf\2\2\u060d\u060f\3\2\2\2\u060e\u0609\3\2\2\2\u060e")
        buf.write("\u060a\3\2\2\2\u060f\u0613\3\2\2\2\u0610\u0612\5\u00f0")
        buf.write("y\2\u0611\u0610\3\2\2\2\u0612\u0615\3\2\2\2\u0613\u0611")
        buf.write("\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u00ed\3\2\2\2\u0615")
        buf.write("\u0613\3\2\2\2\u0616\u0618\7\u00c7\2\2\u0617\u0616\3\2")
        buf.write("\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u0622\3\2\2\2\u061b\u0619\3\2\2\2\u061c")
        buf.write("\u0623\7\u00d6\2\2\u061d\u061e\7\u00c7\2\2\u061e\u061f")
        buf.write("\7\u00ce\2\2\u061f\u0620\5\u00a8U\2\u0620\u0621\7\u00cf")
        buf.write("\2\2\u0621\u0623\3\2\2\2\u0622\u061c\3\2\2\2\u0622\u061d")
        buf.write("\3\2\2\2\u0623\u0627\3\2\2\2\u0624\u0626\5\u00f0y\2\u0625")
        buf.write("\u0624\3\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625\3\2\2\2")
        buf.write("\u0627\u0628\3\2\2\2\u0628\u00ef\3\2\2\2\u0629\u0627\3")
        buf.write("\2\2\2\u062a\u062c\7\u00cc\2\2\u062b\u062d\5\u00a8U\2")
        buf.write("\u062c\u062b\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\3")
        buf.write("\2\2\2\u062e\u0634\7\u00cd\2\2\u062f\u0630\7\u00ce\2\2")
        buf.write("\u0630\u0631\5\u00a8U\2\u0631\u0632\7\u00cf\2\2\u0632")
        buf.write("\u0634\3\2\2\2\u0633\u062a\3\2\2\2\u0633\u062f\3\2\2\2")
        buf.write("\u0634\u00f1\3\2\2\2\u0635\u0637\5\u00f4{\2\u0636\u0635")
        buf.write("\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u063e\3\2\2\2\u0638")
        buf.write("\u063a\7\u00d0\2\2\u0639\u063b\5\u00f4{\2\u063a\u0639")
        buf.write("\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063d\3\2\2\2\u063c")
        buf.write("\u0638\3\2\2\2\u063d\u0640\3\2\2\2\u063e\u063c\3\2\2\2")
        buf.write("\u063e\u063f\3\2\2\2\u063f\u00f3\3\2\2\2\u0640\u063e\3")
        buf.write("\2\2\2\u0641\u0648\5\u00dep\2\u0642\u0643\7b\2\2\u0643")
        buf.write("\u0644\7\u00ca\2\2\u0644\u0645\5\u00f2z\2\u0645\u0646")
        buf.write("\7\u00cb\2\2\u0646\u0648\3\2\2\2\u0647\u0641\3\2\2\2\u0647")
        buf.write("\u0642\3\2\2\2\u0648\u00f5\3\2\2\2\u0649\u064a\t\23\2")
        buf.write("\2\u064a\u00f7\3\2\2\2\u064b\u064c\t\24\2\2\u064c\u00f9")
        buf.write("\3\2\2\2\u064d\u064e\t\25\2\2\u064e\u00fb\3\2\2\2\u064f")
        buf.write("\u0650\t\26\2\2\u0650\u00fd\3\2\2\2\u0651\u0652\t\27\2")
        buf.write("\2\u0652\u00ff\3\2\2\2\u0653\u0654\t\30\2\2\u0654\u0101")
        buf.write("\3\2\2\2\u0655\u0656\t\31\2\2\u0656\u0103\3\2\2\2\u00ba")
        buf.write("\u0105\u010a\u0112\u0117\u0131\u0135\u013a\u013f\u0145")
        buf.write("\u0152\u0156\u015c\u0161\u0166\u016c\u0170\u0176\u017d")
        buf.write("\u0184\u0189\u018d\u0196\u0199\u019c\u01a1\u01a5\u01a9")
        buf.write("\u01ae\u01b2\u01b4\u01ba\u01c6\u01d7\u01de\u01e6\u01f1")
        buf.write("\u01f9\u0201\u0208\u020f\u0226\u022d\u0235\u023f\u0245")
        buf.write("\u0262\u0270\u0274\u027d\u0281\u0286\u02a0\u02ab\u02af")
        buf.write("\u02b3\u02bc\u02c6\u02cb\u02d1\u02d6\u02db\u02e0\u02e5")
        buf.write("\u02eb\u02f1\u02f7\u0309\u030e\u0311\u031b\u031e\u032b")
        buf.write("\u0333\u033a\u033d\u0342\u0346\u0364\u0369\u036d\u0374")
        buf.write("\u0378\u037e\u0383\u0386\u0389\u0390\u0398\u03a5\u03b1")
        buf.write("\u03bd\u03c9\u03d0\u03d4\u03d8\u03de\u03e6\u03ed\u03f1")
        buf.write("\u03f5\u0402\u0405\u040c\u0416\u041a\u041f\u0424\u0431")
        buf.write("\u043b\u0441\u0467\u046c\u046f\u0475\u0492\u0499\u049d")
        buf.write("\u04a3\u04b0\u04b2\u04d8\u04e8\u04ea\u04f0\u04f8\u04ff")
        buf.write("\u0503\u0508\u050d\u0511\u051a\u0520\u0526\u0529\u052d")
        buf.write("\u0530\u0534\u053b\u053f\u0542\u054b\u0553\u055c\u0560")
        buf.write("\u0565\u056a\u0572\u0574\u057a\u057c\u0581\u0588\u058e")
        buf.write("\u0595\u059b\u05a5\u05a9\u05ae\u05b6\u05bc\u05c3\u05c7")
        buf.write("\u05cb\u05d2\u05db\u05e0\u05e6\u05ee\u05f1\u05f7\u05fd")
        buf.write("\u0603\u0607\u060e\u0613\u0619\u0622\u0627\u062c\u0633")
        buf.write("\u0636\u063a\u063e\u0647")
        return buf.getvalue()


class PhpParser ( Parser ):

    grammarFileName = "PhpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'/>'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'abstract'", "'array'", 
                     "'as'", "'binary'", "<INVALID>", "<INVALID>", "'break'", 
                     "'callable'", "'case'", "'catch'", "'class'", "'clone'", 
                     "'const'", "'continue'", "'declare'", "'default'", 
                     "'do'", "'real'", "'double'", "'echo'", "'else'", "'elseif'", 
                     "'empty'", "'enddeclare'", "'endfor'", "'endforeach'", 
                     "'endif'", "'endswitch'", "'endwhile'", "'eval'", "'die'", 
                     "'extends'", "'final'", "'finally'", "'float'", "'for'", 
                     "'foreach'", "'function'", "'global'", "'goto'", "'if'", 
                     "'implements'", "'import'", "'include'", "'include_once'", 
                     "'instanceof'", "'insteadof'", "'int8'", "'int16'", 
                     "'int64'", "<INVALID>", "'interface'", "'isset'", "'list'", 
                     "'and'", "'or'", "'xor'", "'namespace'", "'new'", "'null'", 
                     "'object'", "'parent'", "'partial'", "'print'", "'private'", 
                     "'protected'", "'public'", "'require'", "'require_once'", 
                     "'resource'", "'return'", "'static'", "'string'", "'switch'", 
                     "'throw'", "'trait'", "'try'", "'clrtypeof'", "<INVALID>", 
                     "'unicode'", "'unset'", "'use'", "'var'", "'while'", 
                     "'yield'", "'__get'", "'__set'", "'__call'", "'__callstatic'", 
                     "'__construct'", "'__destruct'", "'__wakeup'", "'__sleep'", 
                     "'__autoload'", "'__isset'", "'__unset'", "'__tostring'", 
                     "'__invoke'", "'__set_state'", "'__clone'", "'__debuginfo'", 
                     "'__namespace__'", "'__class__'", "'__trait__'", "'__function__'", 
                     "'__method__'", "'__line__'", "'__file__'", "'__dir__'", 
                     "'<:'", "':>'", "'=>'", "'++'", "'--'", "'==='", "'!=='", 
                     "'=='", "<INVALID>", "'<='", "'>='", "'+='", "'-='", 
                     "'*='", "'**'", "'**='", "'/='", "'.='", "'%='", "'<<='", 
                     "'>>='", "'&='", "'|='", "'^='", "'||'", "'&&'", "'<<'", 
                     "'>>'", "'::'", "'->'", "'\\'", "'...'", "<INVALID>", 
                     "<INVALID>", "'&'", "'|'", "'!'", "'^'", "'+'", "'-'", 
                     "'*'", "'%'", "<INVALID>", "'~'", "'@'", "<INVALID>", 
                     "'.'", "<INVALID>", "'('", "')'", "'['", "']'", "<INVALID>", 
                     "'}'", "','", "':'", "';'", "<INVALID>", "'''", "'`'" ]

    symbolicNames = [ "<INVALID>", "SeaWhitespace", "HtmlText", "XmlStart", 
                      "PHPStart", "HtmlScriptOpen", "HtmlStyleOpen", "HtmlComment", 
                      "HtmlDtd", "HtmlOpen", "Shebang", "Error", "XmlText", 
                      "XmlClose", "PHPStartInside", "HtmlClose", "HtmlSlashClose", 
                      "HtmlSlash", "HtmlEquals", "HtmlStartQuoteString", 
                      "HtmlStartDoubleQuoteString", "HtmlHex", "HtmlDecimal", 
                      "HtmlSpace", "HtmlName", "ErrorInside", "PHPStartInsideQuoteString", 
                      "HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", 
                      "PHPStartDoubleQuoteString", "HtmlEndDoubleQuoteString", 
                      "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote", "ScriptText", 
                      "ScriptClose", "PHPStartInsideScript", "StyleBody", 
                      "PHPEnd", "Whitespace", "MultiLineComment", "SingleLineComment", 
                      "ShellStyleComment", "Abstract", "Array", "As", "BinaryCast", 
                      "BoolType", "BooleanConstant", "Break", "Callable", 
                      "Case", "Catch", "Class", "Clone", "Const", "Continue", 
                      "Declare", "Default", "Do", "DoubleCast", "DoubleType", 
                      "Echo", "Else", "ElseIf", "Empty", "EndDeclare", "EndFor", 
                      "EndForeach", "EndIf", "EndSwitch", "EndWhile", "Eval", 
                      "Exit", "Extends", "Final", "Finally", "FloatCast", 
                      "For", "Foreach", "Function", "Global", "Goto", "If", 
                      "Implements", "Import", "Include", "IncludeOnce", 
                      "InstanceOf", "InsteadOf", "Int8Cast", "Int16Cast", 
                      "Int64Type", "IntType", "Interface", "IsSet", "List", 
                      "LogicalAnd", "LogicalOr", "LogicalXor", "Namespace", 
                      "New", "Null", "ObjectType", "Parent_", "Partial", 
                      "Print", "Private", "Protected", "Public", "Require", 
                      "RequireOnce", "Resource", "Return", "Static", "StringType", 
                      "Switch", "Throw", "Trait", "Try", "Typeof", "UintCast", 
                      "UnicodeCast", "Unset", "Use", "Var", "While", "Yield", 
                      "Get", "Set", "Call", "CallStatic", "Constructor", 
                      "Destruct", "Wakeup", "Sleep", "Autoload", "IsSet__", 
                      "Unset__", "ToString__", "Invoke", "SetState", "Clone__", 
                      "DebugInfo", "Namespace__", "Class__", "Traic__", 
                      "Function__", "Method__", "Line__", "File__", "Dir__", 
                      "Lgeneric", "Rgeneric", "DoubleArrow", "Inc", "Dec", 
                      "IsIdentical", "IsNoidentical", "IsEqual", "IsNotEq", 
                      "IsSmallerOrEqual", "IsGreaterOrEqual", "PlusEqual", 
                      "MinusEqual", "MulEqual", "Pow", "PowEqual", "DivEqual", 
                      "Concaequal", "ModEqual", "ShiftLeftEqual", "ShiftRightEqual", 
                      "AndEqual", "OrEqual", "XorEqual", "BooleanOr", "BooleanAnd", 
                      "ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator", 
                      "NamespaceSeparator", "Ellipsis", "Less", "Greater", 
                      "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
                      "Asterisk", "Percent", "Divide", "Tilde", "SuppressWarnings", 
                      "Dollar", "Dot", "QuestionMark", "OpenRoundBracket", 
                      "CloseRoundBracket", "OpenSquareBracket", "CloseSquareBracket", 
                      "OpenCurlyBracket", "CloseCurlyBracket", "Comma", 
                      "Colon", "SemiColon", "Eq", "Quote", "BackQuote", 
                      "VarName", "Label", "Octal", "Decimal", "Real", "Hex", 
                      "Binary", "BackQuoteString", "SingleQuoteString", 
                      "DoubleQuote", "StartNowDoc", "StartHereDoc", "ErrorPhp", 
                      "CurlyDollar", "StringPart", "Comment", "PHPEndSingleLineComment", 
                      "CommentEnd", "HereDocText", "XmlText2" ]

    RULE_htmlDocument = 0
    RULE_htmlElementOrPhpBlock = 1
    RULE_htmlElements = 2
    RULE_htmlElement = 3
    RULE_scriptTextPart = 4
    RULE_phpBlock = 5
    RULE_importStatement = 6
    RULE_topStatement = 7
    RULE_useDeclaration = 8
    RULE_useDeclarationContentList = 9
    RULE_useDeclarationContent = 10
    RULE_namespaceDeclaration = 11
    RULE_namespaceStatement = 12
    RULE_functionDeclaration = 13
    RULE_classDeclaration = 14
    RULE_classEntryType = 15
    RULE_interfaceList = 16
    RULE_typeParameterListInBrackets = 17
    RULE_typeParameterList = 18
    RULE_typeParameterWithDefaultsList = 19
    RULE_typeParameterDecl = 20
    RULE_typeParameterWithDefaultDecl = 21
    RULE_genericDynamicArgs = 22
    RULE_attributes = 23
    RULE_attributesGroup = 24
    RULE_attribute = 25
    RULE_attributeArgList = 26
    RULE_attributeNamedArgList = 27
    RULE_attributeNamedArg = 28
    RULE_innerStatementList = 29
    RULE_innerStatement = 30
    RULE_statement = 31
    RULE_emptyStatement = 32
    RULE_blockStatement = 33
    RULE_ifStatement = 34
    RULE_elseIfStatement = 35
    RULE_elseIfColonStatement = 36
    RULE_elseStatement = 37
    RULE_elseColonStatement = 38
    RULE_whileStatement = 39
    RULE_doWhileStatement = 40
    RULE_forStatement = 41
    RULE_forInit = 42
    RULE_forUpdate = 43
    RULE_switchStatement = 44
    RULE_switchBlock = 45
    RULE_breakStatement = 46
    RULE_continueStatement = 47
    RULE_returnStatement = 48
    RULE_expressionStatement = 49
    RULE_unsetStatement = 50
    RULE_foreachStatement = 51
    RULE_tryCatchFinally = 52
    RULE_catchClause = 53
    RULE_finallyStatement = 54
    RULE_throwStatement = 55
    RULE_gotoStatement = 56
    RULE_declareStatement = 57
    RULE_inlineHtmlStatement = 58
    RULE_inlineHtml = 59
    RULE_declareList = 60
    RULE_formalParameterList = 61
    RULE_formalParameter = 62
    RULE_typeHint = 63
    RULE_globalStatement = 64
    RULE_globalVar = 65
    RULE_echoStatement = 66
    RULE_staticVariableStatement = 67
    RULE_classStatement = 68
    RULE_traitAdaptations = 69
    RULE_traitAdaptationStatement = 70
    RULE_traitPrecedence = 71
    RULE_traitAlias = 72
    RULE_traitMethodReference = 73
    RULE_baseCtorCall = 74
    RULE_methodBody = 75
    RULE_propertyModifiers = 76
    RULE_memberModifiers = 77
    RULE_variableInitializer = 78
    RULE_identifierInititalizer = 79
    RULE_globalConstantDeclaration = 80
    RULE_expressionList = 81
    RULE_parenthesis = 82
    RULE_expression = 83
    RULE_newExpr = 84
    RULE_assignmentOperator = 85
    RULE_yieldExpression = 86
    RULE_arrayItemList = 87
    RULE_arrayItem = 88
    RULE_lambdaFunctionUseVars = 89
    RULE_lambdaFunctionUseVar = 90
    RULE_qualifiedStaticTypeRef = 91
    RULE_typeRef = 92
    RULE_indirectTypeRef = 93
    RULE_qualifiedNamespaceName = 94
    RULE_namespaceNameList = 95
    RULE_qualifiedNamespaceNameList = 96
    RULE_arguments = 97
    RULE_actualArgument = 98
    RULE_constantInititalizer = 99
    RULE_constantArrayItemList = 100
    RULE_constantArrayItem = 101
    RULE_constant = 102
    RULE_literalConstant = 103
    RULE_numericConstant = 104
    RULE_classConstant = 105
    RULE_stringConstant = 106
    RULE_string = 107
    RULE_interpolatedStringPart = 108
    RULE_chainList = 109
    RULE_chain = 110
    RULE_memberAccess = 111
    RULE_functionCall = 112
    RULE_functionCallName = 113
    RULE_actualArguments = 114
    RULE_chainBase = 115
    RULE_keyedFieldName = 116
    RULE_keyedSimpleFieldName = 117
    RULE_keyedVariable = 118
    RULE_squareCurlyExpression = 119
    RULE_assignmentList = 120
    RULE_assignmentListElement = 121
    RULE_modifier = 122
    RULE_identifier = 123
    RULE_memberModifier = 124
    RULE_magicConstant = 125
    RULE_magicMethod = 126
    RULE_primitiveType = 127
    RULE_castOperation = 128

    ruleNames =  [ "htmlDocument", "htmlElementOrPhpBlock", "htmlElements", 
                   "htmlElement", "scriptTextPart", "phpBlock", "importStatement", 
                   "topStatement", "useDeclaration", "useDeclarationContentList", 
                   "useDeclarationContent", "namespaceDeclaration", "namespaceStatement", 
                   "functionDeclaration", "classDeclaration", "classEntryType", 
                   "interfaceList", "typeParameterListInBrackets", "typeParameterList", 
                   "typeParameterWithDefaultsList", "typeParameterDecl", 
                   "typeParameterWithDefaultDecl", "genericDynamicArgs", 
                   "attributes", "attributesGroup", "attribute", "attributeArgList", 
                   "attributeNamedArgList", "attributeNamedArg", "innerStatementList", 
                   "innerStatement", "statement", "emptyStatement", "blockStatement", 
                   "ifStatement", "elseIfStatement", "elseIfColonStatement", 
                   "elseStatement", "elseColonStatement", "whileStatement", 
                   "doWhileStatement", "forStatement", "forInit", "forUpdate", 
                   "switchStatement", "switchBlock", "breakStatement", "continueStatement", 
                   "returnStatement", "expressionStatement", "unsetStatement", 
                   "foreachStatement", "tryCatchFinally", "catchClause", 
                   "finallyStatement", "throwStatement", "gotoStatement", 
                   "declareStatement", "inlineHtmlStatement", "inlineHtml", 
                   "declareList", "formalParameterList", "formalParameter", 
                   "typeHint", "globalStatement", "globalVar", "echoStatement", 
                   "staticVariableStatement", "classStatement", "traitAdaptations", 
                   "traitAdaptationStatement", "traitPrecedence", "traitAlias", 
                   "traitMethodReference", "baseCtorCall", "methodBody", 
                   "propertyModifiers", "memberModifiers", "variableInitializer", 
                   "identifierInititalizer", "globalConstantDeclaration", 
                   "expressionList", "parenthesis", "expression", "newExpr", 
                   "assignmentOperator", "yieldExpression", "arrayItemList", 
                   "arrayItem", "lambdaFunctionUseVars", "lambdaFunctionUseVar", 
                   "qualifiedStaticTypeRef", "typeRef", "indirectTypeRef", 
                   "qualifiedNamespaceName", "namespaceNameList", "qualifiedNamespaceNameList", 
                   "arguments", "actualArgument", "constantInititalizer", 
                   "constantArrayItemList", "constantArrayItem", "constant", 
                   "literalConstant", "numericConstant", "classConstant", 
                   "stringConstant", "string", "interpolatedStringPart", 
                   "chainList", "chain", "memberAccess", "functionCall", 
                   "functionCallName", "actualArguments", "chainBase", "keyedFieldName", 
                   "keyedSimpleFieldName", "keyedVariable", "squareCurlyExpression", 
                   "assignmentList", "assignmentListElement", "modifier", 
                   "identifier", "memberModifier", "magicConstant", "magicMethod", 
                   "primitiveType", "castOperation" ]

    EOF = Token.EOF
    SeaWhitespace=1
    HtmlText=2
    XmlStart=3
    PHPStart=4
    HtmlScriptOpen=5
    HtmlStyleOpen=6
    HtmlComment=7
    HtmlDtd=8
    HtmlOpen=9
    Shebang=10
    Error=11
    XmlText=12
    XmlClose=13
    PHPStartInside=14
    HtmlClose=15
    HtmlSlashClose=16
    HtmlSlash=17
    HtmlEquals=18
    HtmlStartQuoteString=19
    HtmlStartDoubleQuoteString=20
    HtmlHex=21
    HtmlDecimal=22
    HtmlSpace=23
    HtmlName=24
    ErrorInside=25
    PHPStartInsideQuoteString=26
    HtmlEndQuoteString=27
    HtmlQuoteString=28
    ErrorHtmlQuote=29
    PHPStartDoubleQuoteString=30
    HtmlEndDoubleQuoteString=31
    HtmlDoubleQuoteString=32
    ErrorHtmlDoubleQuote=33
    ScriptText=34
    ScriptClose=35
    PHPStartInsideScript=36
    StyleBody=37
    PHPEnd=38
    Whitespace=39
    MultiLineComment=40
    SingleLineComment=41
    ShellStyleComment=42
    Abstract=43
    Array=44
    As=45
    BinaryCast=46
    BoolType=47
    BooleanConstant=48
    Break=49
    Callable=50
    Case=51
    Catch=52
    Class=53
    Clone=54
    Const=55
    Continue=56
    Declare=57
    Default=58
    Do=59
    DoubleCast=60
    DoubleType=61
    Echo=62
    Else=63
    ElseIf=64
    Empty=65
    EndDeclare=66
    EndFor=67
    EndForeach=68
    EndIf=69
    EndSwitch=70
    EndWhile=71
    Eval=72
    Exit=73
    Extends=74
    Final=75
    Finally=76
    FloatCast=77
    For=78
    Foreach=79
    Function=80
    Global=81
    Goto=82
    If=83
    Implements=84
    Import=85
    Include=86
    IncludeOnce=87
    InstanceOf=88
    InsteadOf=89
    Int8Cast=90
    Int16Cast=91
    Int64Type=92
    IntType=93
    Interface=94
    IsSet=95
    List=96
    LogicalAnd=97
    LogicalOr=98
    LogicalXor=99
    Namespace=100
    New=101
    Null=102
    ObjectType=103
    Parent_=104
    Partial=105
    Print=106
    Private=107
    Protected=108
    Public=109
    Require=110
    RequireOnce=111
    Resource=112
    Return=113
    Static=114
    StringType=115
    Switch=116
    Throw=117
    Trait=118
    Try=119
    Typeof=120
    UintCast=121
    UnicodeCast=122
    Unset=123
    Use=124
    Var=125
    While=126
    Yield=127
    Get=128
    Set=129
    Call=130
    CallStatic=131
    Constructor=132
    Destruct=133
    Wakeup=134
    Sleep=135
    Autoload=136
    IsSet__=137
    Unset__=138
    ToString__=139
    Invoke=140
    SetState=141
    Clone__=142
    DebugInfo=143
    Namespace__=144
    Class__=145
    Traic__=146
    Function__=147
    Method__=148
    Line__=149
    File__=150
    Dir__=151
    Lgeneric=152
    Rgeneric=153
    DoubleArrow=154
    Inc=155
    Dec=156
    IsIdentical=157
    IsNoidentical=158
    IsEqual=159
    IsNotEq=160
    IsSmallerOrEqual=161
    IsGreaterOrEqual=162
    PlusEqual=163
    MinusEqual=164
    MulEqual=165
    Pow=166
    PowEqual=167
    DivEqual=168
    Concaequal=169
    ModEqual=170
    ShiftLeftEqual=171
    ShiftRightEqual=172
    AndEqual=173
    OrEqual=174
    XorEqual=175
    BooleanOr=176
    BooleanAnd=177
    ShiftLeft=178
    ShiftRight=179
    DoubleColon=180
    ObjectOperator=181
    NamespaceSeparator=182
    Ellipsis=183
    Less=184
    Greater=185
    Ampersand=186
    Pipe=187
    Bang=188
    Caret=189
    Plus=190
    Minus=191
    Asterisk=192
    Percent=193
    Divide=194
    Tilde=195
    SuppressWarnings=196
    Dollar=197
    Dot=198
    QuestionMark=199
    OpenRoundBracket=200
    CloseRoundBracket=201
    OpenSquareBracket=202
    CloseSquareBracket=203
    OpenCurlyBracket=204
    CloseCurlyBracket=205
    Comma=206
    Colon=207
    SemiColon=208
    Eq=209
    Quote=210
    BackQuote=211
    VarName=212
    Label=213
    Octal=214
    Decimal=215
    Real=216
    Hex=217
    Binary=218
    BackQuoteString=219
    SingleQuoteString=220
    DoubleQuote=221
    StartNowDoc=222
    StartHereDoc=223
    ErrorPhp=224
    CurlyDollar=225
    StringPart=226
    Comment=227
    PHPEndSingleLineComment=228
    CommentEnd=229
    HereDocText=230
    XmlText2=231

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class HtmlDocumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PhpParser.EOF, 0)

        def Shebang(self):
            return self.getToken(PhpParser.Shebang, 0)

        def htmlElementOrPhpBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.HtmlElementOrPhpBlockContext)
            else:
                return self.getTypedRuleContext(PhpParser.HtmlElementOrPhpBlockContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_htmlDocument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlDocument" ):
                listener.enterHtmlDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlDocument" ):
                listener.exitHtmlDocument(self)




    def htmlDocument(self):

        localctx = PhpParser.HtmlDocumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_htmlDocument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Shebang:
                self.state = 258
                self.match(PhpParser.Shebang)


            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.HtmlText) | (1 << PhpParser.XmlStart) | (1 << PhpParser.HtmlScriptOpen) | (1 << PhpParser.HtmlStyleOpen) | (1 << PhpParser.HtmlDtd) | (1 << PhpParser.HtmlOpen) | (1 << PhpParser.HtmlClose) | (1 << PhpParser.HtmlSlashClose) | (1 << PhpParser.HtmlSlash) | (1 << PhpParser.HtmlEquals) | (1 << PhpParser.HtmlStartQuoteString) | (1 << PhpParser.HtmlStartDoubleQuoteString) | (1 << PhpParser.HtmlHex) | (1 << PhpParser.HtmlDecimal) | (1 << PhpParser.HtmlName) | (1 << PhpParser.HtmlEndQuoteString) | (1 << PhpParser.HtmlQuoteString) | (1 << PhpParser.HtmlEndDoubleQuoteString) | (1 << PhpParser.HtmlDoubleQuoteString) | (1 << PhpParser.ScriptText) | (1 << PhpParser.ScriptClose) | (1 << PhpParser.StyleBody) | (1 << PhpParser.Abstract) | (1 << PhpParser.Array) | (1 << PhpParser.As) | (1 << PhpParser.BinaryCast) | (1 << PhpParser.BoolType) | (1 << PhpParser.BooleanConstant) | (1 << PhpParser.Break) | (1 << PhpParser.Callable) | (1 << PhpParser.Case) | (1 << PhpParser.Catch) | (1 << PhpParser.Class) | (1 << PhpParser.Clone) | (1 << PhpParser.Const) | (1 << PhpParser.Continue) | (1 << PhpParser.Declare) | (1 << PhpParser.Default) | (1 << PhpParser.Do) | (1 << PhpParser.DoubleCast) | (1 << PhpParser.DoubleType) | (1 << PhpParser.Echo) | (1 << PhpParser.Else))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PhpParser.ElseIf - 64)) | (1 << (PhpParser.Empty - 64)) | (1 << (PhpParser.EndDeclare - 64)) | (1 << (PhpParser.EndFor - 64)) | (1 << (PhpParser.EndForeach - 64)) | (1 << (PhpParser.EndIf - 64)) | (1 << (PhpParser.EndSwitch - 64)) | (1 << (PhpParser.EndWhile - 64)) | (1 << (PhpParser.Eval - 64)) | (1 << (PhpParser.Exit - 64)) | (1 << (PhpParser.Extends - 64)) | (1 << (PhpParser.Final - 64)) | (1 << (PhpParser.Finally - 64)) | (1 << (PhpParser.FloatCast - 64)) | (1 << (PhpParser.For - 64)) | (1 << (PhpParser.Foreach - 64)) | (1 << (PhpParser.Function - 64)) | (1 << (PhpParser.Global - 64)) | (1 << (PhpParser.Goto - 64)) | (1 << (PhpParser.If - 64)) | (1 << (PhpParser.Implements - 64)) | (1 << (PhpParser.Import - 64)) | (1 << (PhpParser.Include - 64)) | (1 << (PhpParser.IncludeOnce - 64)) | (1 << (PhpParser.InstanceOf - 64)) | (1 << (PhpParser.InsteadOf - 64)) | (1 << (PhpParser.Int8Cast - 64)) | (1 << (PhpParser.Int16Cast - 64)) | (1 << (PhpParser.Int64Type - 64)) | (1 << (PhpParser.IntType - 64)) | (1 << (PhpParser.Interface - 64)) | (1 << (PhpParser.IsSet - 64)) | (1 << (PhpParser.List - 64)) | (1 << (PhpParser.LogicalAnd - 64)) | (1 << (PhpParser.LogicalOr - 64)) | (1 << (PhpParser.LogicalXor - 64)) | (1 << (PhpParser.Namespace - 64)) | (1 << (PhpParser.New - 64)) | (1 << (PhpParser.Null - 64)) | (1 << (PhpParser.ObjectType - 64)) | (1 << (PhpParser.Parent_ - 64)) | (1 << (PhpParser.Partial - 64)) | (1 << (PhpParser.Print - 64)) | (1 << (PhpParser.Private - 64)) | (1 << (PhpParser.Protected - 64)) | (1 << (PhpParser.Public - 64)) | (1 << (PhpParser.Require - 64)) | (1 << (PhpParser.RequireOnce - 64)) | (1 << (PhpParser.Resource - 64)) | (1 << (PhpParser.Return - 64)) | (1 << (PhpParser.Static - 64)) | (1 << (PhpParser.StringType - 64)) | (1 << (PhpParser.Switch - 64)) | (1 << (PhpParser.Throw - 64)) | (1 << (PhpParser.Trait - 64)) | (1 << (PhpParser.Try - 64)) | (1 << (PhpParser.Typeof - 64)) | (1 << (PhpParser.UintCast - 64)) | (1 << (PhpParser.UnicodeCast - 64)) | (1 << (PhpParser.Unset - 64)) | (1 << (PhpParser.Use - 64)) | (1 << (PhpParser.Var - 64)) | (1 << (PhpParser.While - 64)) | (1 << (PhpParser.Yield - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PhpParser.Get - 128)) | (1 << (PhpParser.Set - 128)) | (1 << (PhpParser.Call - 128)) | (1 << (PhpParser.CallStatic - 128)) | (1 << (PhpParser.Constructor - 128)) | (1 << (PhpParser.Destruct - 128)) | (1 << (PhpParser.Wakeup - 128)) | (1 << (PhpParser.Sleep - 128)) | (1 << (PhpParser.Autoload - 128)) | (1 << (PhpParser.IsSet__ - 128)) | (1 << (PhpParser.Unset__ - 128)) | (1 << (PhpParser.ToString__ - 128)) | (1 << (PhpParser.Invoke - 128)) | (1 << (PhpParser.SetState - 128)) | (1 << (PhpParser.Clone__ - 128)) | (1 << (PhpParser.DebugInfo - 128)) | (1 << (PhpParser.Namespace__ - 128)) | (1 << (PhpParser.Class__ - 128)) | (1 << (PhpParser.Traic__ - 128)) | (1 << (PhpParser.Function__ - 128)) | (1 << (PhpParser.Method__ - 128)) | (1 << (PhpParser.Line__ - 128)) | (1 << (PhpParser.File__ - 128)) | (1 << (PhpParser.Dir__ - 128)) | (1 << (PhpParser.Inc - 128)) | (1 << (PhpParser.Dec - 128)) | (1 << (PhpParser.NamespaceSeparator - 128)) | (1 << (PhpParser.Bang - 128)) | (1 << (PhpParser.Plus - 128)) | (1 << (PhpParser.Minus - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (PhpParser.Tilde - 195)) | (1 << (PhpParser.SuppressWarnings - 195)) | (1 << (PhpParser.Dollar - 195)) | (1 << (PhpParser.OpenRoundBracket - 195)) | (1 << (PhpParser.OpenSquareBracket - 195)) | (1 << (PhpParser.OpenCurlyBracket - 195)) | (1 << (PhpParser.SemiColon - 195)) | (1 << (PhpParser.VarName - 195)) | (1 << (PhpParser.Label - 195)) | (1 << (PhpParser.Octal - 195)) | (1 << (PhpParser.Decimal - 195)) | (1 << (PhpParser.Real - 195)) | (1 << (PhpParser.Hex - 195)) | (1 << (PhpParser.Binary - 195)) | (1 << (PhpParser.BackQuoteString - 195)) | (1 << (PhpParser.SingleQuoteString - 195)) | (1 << (PhpParser.DoubleQuote - 195)) | (1 << (PhpParser.StartNowDoc - 195)) | (1 << (PhpParser.StartHereDoc - 195)))) != 0):
                self.state = 261
                self.htmlElementOrPhpBlock()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self.match(PhpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HtmlElementOrPhpBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElements(self):
            return self.getTypedRuleContext(PhpParser.HtmlElementsContext,0)


        def phpBlock(self):
            return self.getTypedRuleContext(PhpParser.PhpBlockContext,0)


        def scriptTextPart(self):
            return self.getTypedRuleContext(PhpParser.ScriptTextPartContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_htmlElementOrPhpBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElementOrPhpBlock" ):
                listener.enterHtmlElementOrPhpBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElementOrPhpBlock" ):
                listener.exitHtmlElementOrPhpBlock(self)




    def htmlElementOrPhpBlock(self):

        localctx = PhpParser.HtmlElementOrPhpBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_htmlElementOrPhpBlock)
        try:
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.htmlElements()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                self.phpBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 271
                self.scriptTextPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HtmlElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.HtmlElementContext)
            else:
                return self.getTypedRuleContext(PhpParser.HtmlElementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_htmlElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElements" ):
                listener.enterHtmlElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElements" ):
                listener.exitHtmlElements(self)




    def htmlElements(self):

        localctx = PhpParser.HtmlElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_htmlElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 274
                    self.htmlElement()

                else:
                    raise NoViableAltException(self)
                self.state = 277 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HtmlElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HtmlDtd(self):
            return self.getToken(PhpParser.HtmlDtd, 0)

        def HtmlScriptOpen(self):
            return self.getToken(PhpParser.HtmlScriptOpen, 0)

        def HtmlClose(self):
            return self.getToken(PhpParser.HtmlClose, 0)

        def HtmlStyleOpen(self):
            return self.getToken(PhpParser.HtmlStyleOpen, 0)

        def HtmlOpen(self):
            return self.getToken(PhpParser.HtmlOpen, 0)

        def HtmlName(self):
            return self.getToken(PhpParser.HtmlName, 0)

        def HtmlSlashClose(self):
            return self.getToken(PhpParser.HtmlSlashClose, 0)

        def HtmlSlash(self):
            return self.getToken(PhpParser.HtmlSlash, 0)

        def HtmlText(self):
            return self.getToken(PhpParser.HtmlText, 0)

        def HtmlEquals(self):
            return self.getToken(PhpParser.HtmlEquals, 0)

        def HtmlStartQuoteString(self):
            return self.getToken(PhpParser.HtmlStartQuoteString, 0)

        def HtmlEndQuoteString(self):
            return self.getToken(PhpParser.HtmlEndQuoteString, 0)

        def HtmlStartDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlStartDoubleQuoteString, 0)

        def HtmlEndDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlEndDoubleQuoteString, 0)

        def HtmlHex(self):
            return self.getToken(PhpParser.HtmlHex, 0)

        def HtmlDecimal(self):
            return self.getToken(PhpParser.HtmlDecimal, 0)

        def HtmlQuoteString(self):
            return self.getToken(PhpParser.HtmlQuoteString, 0)

        def HtmlDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlDoubleQuoteString, 0)

        def StyleBody(self):
            return self.getToken(PhpParser.StyleBody, 0)

        def ScriptClose(self):
            return self.getToken(PhpParser.ScriptClose, 0)

        def XmlStart(self):
            return self.getToken(PhpParser.XmlStart, 0)

        def XmlClose(self):
            return self.getToken(PhpParser.XmlClose, 0)

        def XmlText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.XmlText)
            else:
                return self.getToken(PhpParser.XmlText, i)

        def getRuleIndex(self):
            return PhpParser.RULE_htmlElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElement" ):
                listener.enterHtmlElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElement" ):
                listener.exitHtmlElement(self)




    def htmlElement(self):

        localctx = PhpParser.HtmlElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_htmlElement)
        self._la = 0 # Token type
        try:
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlDtd]:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.match(PhpParser.HtmlDtd)
                pass
            elif token in [PhpParser.HtmlScriptOpen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.match(PhpParser.HtmlScriptOpen)
                pass
            elif token in [PhpParser.HtmlClose]:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self.match(PhpParser.HtmlClose)
                pass
            elif token in [PhpParser.HtmlStyleOpen]:
                self.enterOuterAlt(localctx, 4)
                self.state = 282
                self.match(PhpParser.HtmlStyleOpen)
                pass
            elif token in [PhpParser.HtmlOpen]:
                self.enterOuterAlt(localctx, 5)
                self.state = 283
                self.match(PhpParser.HtmlOpen)
                pass
            elif token in [PhpParser.HtmlName]:
                self.enterOuterAlt(localctx, 6)
                self.state = 284
                self.match(PhpParser.HtmlName)
                pass
            elif token in [PhpParser.HtmlSlashClose]:
                self.enterOuterAlt(localctx, 7)
                self.state = 285
                self.match(PhpParser.HtmlSlashClose)
                pass
            elif token in [PhpParser.HtmlSlash]:
                self.enterOuterAlt(localctx, 8)
                self.state = 286
                self.match(PhpParser.HtmlSlash)
                pass
            elif token in [PhpParser.HtmlText]:
                self.enterOuterAlt(localctx, 9)
                self.state = 287
                self.match(PhpParser.HtmlText)
                pass
            elif token in [PhpParser.HtmlEquals]:
                self.enterOuterAlt(localctx, 10)
                self.state = 288
                self.match(PhpParser.HtmlEquals)
                pass
            elif token in [PhpParser.HtmlStartQuoteString]:
                self.enterOuterAlt(localctx, 11)
                self.state = 289
                self.match(PhpParser.HtmlStartQuoteString)
                pass
            elif token in [PhpParser.HtmlEndQuoteString]:
                self.enterOuterAlt(localctx, 12)
                self.state = 290
                self.match(PhpParser.HtmlEndQuoteString)
                pass
            elif token in [PhpParser.HtmlStartDoubleQuoteString]:
                self.enterOuterAlt(localctx, 13)
                self.state = 291
                self.match(PhpParser.HtmlStartDoubleQuoteString)
                pass
            elif token in [PhpParser.HtmlEndDoubleQuoteString]:
                self.enterOuterAlt(localctx, 14)
                self.state = 292
                self.match(PhpParser.HtmlEndDoubleQuoteString)
                pass
            elif token in [PhpParser.HtmlHex]:
                self.enterOuterAlt(localctx, 15)
                self.state = 293
                self.match(PhpParser.HtmlHex)
                pass
            elif token in [PhpParser.HtmlDecimal]:
                self.enterOuterAlt(localctx, 16)
                self.state = 294
                self.match(PhpParser.HtmlDecimal)
                pass
            elif token in [PhpParser.HtmlQuoteString]:
                self.enterOuterAlt(localctx, 17)
                self.state = 295
                self.match(PhpParser.HtmlQuoteString)
                pass
            elif token in [PhpParser.HtmlDoubleQuoteString]:
                self.enterOuterAlt(localctx, 18)
                self.state = 296
                self.match(PhpParser.HtmlDoubleQuoteString)
                pass
            elif token in [PhpParser.StyleBody]:
                self.enterOuterAlt(localctx, 19)
                self.state = 297
                self.match(PhpParser.StyleBody)
                pass
            elif token in [PhpParser.ScriptClose]:
                self.enterOuterAlt(localctx, 20)
                self.state = 298
                self.match(PhpParser.ScriptClose)
                pass
            elif token in [PhpParser.XmlStart]:
                self.enterOuterAlt(localctx, 21)
                self.state = 299
                self.match(PhpParser.XmlStart)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.XmlText:
                    self.state = 300
                    self.match(PhpParser.XmlText)
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 306
                self.match(PhpParser.XmlClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptTextPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ScriptText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.ScriptText)
            else:
                return self.getToken(PhpParser.ScriptText, i)

        def getRuleIndex(self):
            return PhpParser.RULE_scriptTextPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptTextPart" ):
                listener.enterScriptTextPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptTextPart" ):
                listener.exitScriptTextPart(self)




    def scriptTextPart(self):

        localctx = PhpParser.ScriptTextPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_scriptTextPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 309
                    self.match(PhpParser.ScriptText)

                else:
                    raise NoViableAltException(self)
                self.state = 312 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ImportStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ImportStatementContext,i)


        def topStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TopStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.TopStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_phpBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhpBlock" ):
                listener.enterPhpBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhpBlock" ):
                listener.exitPhpBlock(self)




    def phpBlock(self):

        localctx = PhpParser.PhpBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_phpBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 314
                    self.importStatement() 
                self.state = 319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 321 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 320
                    self.topStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 323 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(PhpParser.Import, 0)

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = PhpParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(PhpParser.Import)
            self.state = 326
            self.match(PhpParser.Namespace)
            self.state = 327
            self.namespaceNameList()
            self.state = 328
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContext,0)


        def namespaceDeclaration(self):
            return self.getTypedRuleContext(PhpParser.NamespaceDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PhpParser.GlobalConstantDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_topStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopStatement" ):
                listener.enterTopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopStatement" ):
                listener.exitTopStatement(self)




    def topStatement(self):

        localctx = PhpParser.TopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_topStatement)
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.namespaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.functionDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 334
                self.classDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 335
                self.globalConstantDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def useDeclarationContentList(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContentListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Function(self):
            return self.getToken(PhpParser.Function, 0)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_useDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclaration" ):
                listener.enterUseDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclaration" ):
                listener.exitUseDeclaration(self)




    def useDeclaration(self):

        localctx = PhpParser.UseDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_useDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(PhpParser.Use)
            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 339
                _la = self._input.LA(1)
                if not(_la==PhpParser.Const or _la==PhpParser.Function):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 342
            self.useDeclarationContentList()
            self.state = 343
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useDeclarationContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.UseDeclarationContentContext)
            else:
                return self.getTypedRuleContext(PhpParser.UseDeclarationContentContext,i)


        def NamespaceSeparator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.NamespaceSeparator)
            else:
                return self.getToken(PhpParser.NamespaceSeparator, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_useDeclarationContentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContentList" ):
                listener.enterUseDeclarationContentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContentList" ):
                listener.exitUseDeclarationContentList(self)




    def useDeclarationContentList(self):

        localctx = PhpParser.UseDeclarationContentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_useDeclarationContentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.NamespaceSeparator:
                self.state = 345
                self.match(PhpParser.NamespaceSeparator)


            self.state = 348
            self.useDeclarationContent()
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 349
                self.match(PhpParser.Comma)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.NamespaceSeparator:
                    self.state = 350
                    self.match(PhpParser.NamespaceSeparator)


                self.state = 353
                self.useDeclarationContent()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_useDeclarationContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContent" ):
                listener.enterUseDeclarationContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContent" ):
                listener.exitUseDeclarationContent(self)




    def useDeclarationContent(self):

        localctx = PhpParser.UseDeclarationContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_useDeclarationContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.namespaceNameList()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.As:
                self.state = 360
                self.match(PhpParser.As)
                self.state = 361
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def namespaceStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.NamespaceStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.NamespaceStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDeclaration" ):
                listener.enterNamespaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDeclaration" ):
                listener.exitNamespaceDeclaration(self)




    def namespaceDeclaration(self):

        localctx = PhpParser.NamespaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(PhpParser.Namespace)
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or _la==PhpParser.Label:
                    self.state = 365
                    self.namespaceNameList()


                self.state = 368
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.HtmlText) | (1 << PhpParser.XmlStart) | (1 << PhpParser.HtmlScriptOpen) | (1 << PhpParser.HtmlStyleOpen) | (1 << PhpParser.HtmlDtd) | (1 << PhpParser.HtmlOpen) | (1 << PhpParser.HtmlClose) | (1 << PhpParser.HtmlSlashClose) | (1 << PhpParser.HtmlSlash) | (1 << PhpParser.HtmlEquals) | (1 << PhpParser.HtmlStartQuoteString) | (1 << PhpParser.HtmlStartDoubleQuoteString) | (1 << PhpParser.HtmlHex) | (1 << PhpParser.HtmlDecimal) | (1 << PhpParser.HtmlName) | (1 << PhpParser.HtmlEndQuoteString) | (1 << PhpParser.HtmlQuoteString) | (1 << PhpParser.HtmlEndDoubleQuoteString) | (1 << PhpParser.HtmlDoubleQuoteString) | (1 << PhpParser.ScriptText) | (1 << PhpParser.ScriptClose) | (1 << PhpParser.StyleBody) | (1 << PhpParser.Abstract) | (1 << PhpParser.Array) | (1 << PhpParser.As) | (1 << PhpParser.BinaryCast) | (1 << PhpParser.BoolType) | (1 << PhpParser.BooleanConstant) | (1 << PhpParser.Break) | (1 << PhpParser.Callable) | (1 << PhpParser.Case) | (1 << PhpParser.Catch) | (1 << PhpParser.Class) | (1 << PhpParser.Clone) | (1 << PhpParser.Const) | (1 << PhpParser.Continue) | (1 << PhpParser.Declare) | (1 << PhpParser.Default) | (1 << PhpParser.Do) | (1 << PhpParser.DoubleCast) | (1 << PhpParser.DoubleType) | (1 << PhpParser.Echo) | (1 << PhpParser.Else))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PhpParser.ElseIf - 64)) | (1 << (PhpParser.Empty - 64)) | (1 << (PhpParser.EndDeclare - 64)) | (1 << (PhpParser.EndFor - 64)) | (1 << (PhpParser.EndForeach - 64)) | (1 << (PhpParser.EndIf - 64)) | (1 << (PhpParser.EndSwitch - 64)) | (1 << (PhpParser.EndWhile - 64)) | (1 << (PhpParser.Eval - 64)) | (1 << (PhpParser.Exit - 64)) | (1 << (PhpParser.Extends - 64)) | (1 << (PhpParser.Final - 64)) | (1 << (PhpParser.Finally - 64)) | (1 << (PhpParser.FloatCast - 64)) | (1 << (PhpParser.For - 64)) | (1 << (PhpParser.Foreach - 64)) | (1 << (PhpParser.Function - 64)) | (1 << (PhpParser.Global - 64)) | (1 << (PhpParser.Goto - 64)) | (1 << (PhpParser.If - 64)) | (1 << (PhpParser.Implements - 64)) | (1 << (PhpParser.Import - 64)) | (1 << (PhpParser.Include - 64)) | (1 << (PhpParser.IncludeOnce - 64)) | (1 << (PhpParser.InstanceOf - 64)) | (1 << (PhpParser.InsteadOf - 64)) | (1 << (PhpParser.Int8Cast - 64)) | (1 << (PhpParser.Int16Cast - 64)) | (1 << (PhpParser.Int64Type - 64)) | (1 << (PhpParser.IntType - 64)) | (1 << (PhpParser.Interface - 64)) | (1 << (PhpParser.IsSet - 64)) | (1 << (PhpParser.List - 64)) | (1 << (PhpParser.LogicalAnd - 64)) | (1 << (PhpParser.LogicalOr - 64)) | (1 << (PhpParser.LogicalXor - 64)) | (1 << (PhpParser.Namespace - 64)) | (1 << (PhpParser.New - 64)) | (1 << (PhpParser.Null - 64)) | (1 << (PhpParser.ObjectType - 64)) | (1 << (PhpParser.Parent_ - 64)) | (1 << (PhpParser.Partial - 64)) | (1 << (PhpParser.Print - 64)) | (1 << (PhpParser.Private - 64)) | (1 << (PhpParser.Protected - 64)) | (1 << (PhpParser.Public - 64)) | (1 << (PhpParser.Require - 64)) | (1 << (PhpParser.RequireOnce - 64)) | (1 << (PhpParser.Resource - 64)) | (1 << (PhpParser.Return - 64)) | (1 << (PhpParser.Static - 64)) | (1 << (PhpParser.StringType - 64)) | (1 << (PhpParser.Switch - 64)) | (1 << (PhpParser.Throw - 64)) | (1 << (PhpParser.Trait - 64)) | (1 << (PhpParser.Try - 64)) | (1 << (PhpParser.Typeof - 64)) | (1 << (PhpParser.UintCast - 64)) | (1 << (PhpParser.UnicodeCast - 64)) | (1 << (PhpParser.Unset - 64)) | (1 << (PhpParser.Use - 64)) | (1 << (PhpParser.Var - 64)) | (1 << (PhpParser.While - 64)) | (1 << (PhpParser.Yield - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PhpParser.Get - 128)) | (1 << (PhpParser.Set - 128)) | (1 << (PhpParser.Call - 128)) | (1 << (PhpParser.CallStatic - 128)) | (1 << (PhpParser.Constructor - 128)) | (1 << (PhpParser.Destruct - 128)) | (1 << (PhpParser.Wakeup - 128)) | (1 << (PhpParser.Sleep - 128)) | (1 << (PhpParser.Autoload - 128)) | (1 << (PhpParser.IsSet__ - 128)) | (1 << (PhpParser.Unset__ - 128)) | (1 << (PhpParser.ToString__ - 128)) | (1 << (PhpParser.Invoke - 128)) | (1 << (PhpParser.SetState - 128)) | (1 << (PhpParser.Clone__ - 128)) | (1 << (PhpParser.DebugInfo - 128)) | (1 << (PhpParser.Namespace__ - 128)) | (1 << (PhpParser.Class__ - 128)) | (1 << (PhpParser.Traic__ - 128)) | (1 << (PhpParser.Function__ - 128)) | (1 << (PhpParser.Method__ - 128)) | (1 << (PhpParser.Line__ - 128)) | (1 << (PhpParser.File__ - 128)) | (1 << (PhpParser.Dir__ - 128)) | (1 << (PhpParser.Inc - 128)) | (1 << (PhpParser.Dec - 128)) | (1 << (PhpParser.NamespaceSeparator - 128)) | (1 << (PhpParser.Bang - 128)) | (1 << (PhpParser.Plus - 128)) | (1 << (PhpParser.Minus - 128)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (PhpParser.Tilde - 195)) | (1 << (PhpParser.SuppressWarnings - 195)) | (1 << (PhpParser.Dollar - 195)) | (1 << (PhpParser.OpenRoundBracket - 195)) | (1 << (PhpParser.OpenSquareBracket - 195)) | (1 << (PhpParser.OpenCurlyBracket - 195)) | (1 << (PhpParser.SemiColon - 195)) | (1 << (PhpParser.VarName - 195)) | (1 << (PhpParser.Label - 195)) | (1 << (PhpParser.Octal - 195)) | (1 << (PhpParser.Decimal - 195)) | (1 << (PhpParser.Real - 195)) | (1 << (PhpParser.Hex - 195)) | (1 << (PhpParser.Binary - 195)) | (1 << (PhpParser.BackQuoteString - 195)) | (1 << (PhpParser.SingleQuoteString - 195)) | (1 << (PhpParser.DoubleQuote - 195)) | (1 << (PhpParser.StartNowDoc - 195)) | (1 << (PhpParser.StartHereDoc - 195)))) != 0):
                    self.state = 369
                    self.namespaceStatement()
                    self.state = 374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 375
                self.match(PhpParser.CloseCurlyBracket)
                pass

            elif la_ == 2:
                self.state = 376
                self.namespaceNameList()
                self.state = 377
                self.match(PhpParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PhpParser.GlobalConstantDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceStatement" ):
                listener.enterNamespaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceStatement" ):
                listener.exitNamespaceStatement(self)




    def namespaceStatement(self):

        localctx = PhpParser.NamespaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_namespaceStatement)
        try:
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 383
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 384
                self.classDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 385
                self.globalConstantDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Function(self):
            return self.getToken(PhpParser.Function, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = PhpParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.attributes()
            self.state = 389
            self.match(PhpParser.Function)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 390
                self.match(PhpParser.Ampersand)


            self.state = 393
            self.identifier()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Lgeneric:
                self.state = 394
                self.typeParameterListInBrackets()


            self.state = 397
            self.match(PhpParser.OpenRoundBracket)
            self.state = 398
            self.formalParameterList()
            self.state = 399
            self.match(PhpParser.CloseRoundBracket)
            self.state = 400
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def classEntryType(self):
            return self.getTypedRuleContext(PhpParser.ClassEntryTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def modifier(self):
            return self.getTypedRuleContext(PhpParser.ModifierContext,0)


        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def classStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ClassStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ClassStatementContext,i)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = PhpParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.attributes()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Private:
                self.state = 403
                self.match(PhpParser.Private)


            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Abstract or _la==PhpParser.Final:
                self.state = 406
                self.modifier()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Partial:
                self.state = 409
                self.match(PhpParser.Partial)


            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Class, PhpParser.Trait]:
                self.state = 412
                self.classEntryType()
                self.state = 413
                self.identifier()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 414
                    self.typeParameterListInBrackets()


                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Extends:
                    self.state = 417
                    self.match(PhpParser.Extends)
                    self.state = 418
                    self.qualifiedStaticTypeRef()


                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Implements:
                    self.state = 421
                    self.match(PhpParser.Implements)
                    self.state = 422
                    self.interfaceList()


                pass
            elif token in [PhpParser.Interface]:
                self.state = 425
                self.match(PhpParser.Interface)
                self.state = 426
                self.identifier()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 427
                    self.typeParameterListInBrackets()


                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Extends:
                    self.state = 430
                    self.match(PhpParser.Extends)
                    self.state = 431
                    self.interfaceList()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 436
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Abstract or _la==PhpParser.Const or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (PhpParser.Final - 75)) | (1 << (PhpParser.Function - 75)) | (1 << (PhpParser.Private - 75)) | (1 << (PhpParser.Protected - 75)) | (1 << (PhpParser.Public - 75)) | (1 << (PhpParser.Static - 75)) | (1 << (PhpParser.Use - 75)) | (1 << (PhpParser.Var - 75)))) != 0) or _la==PhpParser.OpenSquareBracket:
                self.state = 437
                self.classStatement()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassEntryTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Trait(self):
            return self.getToken(PhpParser.Trait, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_classEntryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassEntryType" ):
                listener.enterClassEntryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassEntryType" ):
                listener.exitClassEntryType(self)




    def classEntryType(self):

        localctx = PhpParser.ClassEntryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classEntryType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            _la = self._input.LA(1)
            if not(_la==PhpParser.Class or _la==PhpParser.Trait):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedStaticTypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_interfaceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceList" ):
                listener.enterInterfaceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceList" ):
                listener.exitInterfaceList(self)




    def interfaceList(self):

        localctx = PhpParser.InterfaceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interfaceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.qualifiedStaticTypeRef()
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 448
                self.match(PhpParser.Comma)
                self.state = 449
                self.qualifiedStaticTypeRef()
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListInBracketsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lgeneric(self):
            return self.getToken(PhpParser.Lgeneric, 0)

        def typeParameterList(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListContext,0)


        def Rgeneric(self):
            return self.getToken(PhpParser.Rgeneric, 0)

        def typeParameterWithDefaultsList(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterWithDefaultsListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterListInBrackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterListInBrackets" ):
                listener.enterTypeParameterListInBrackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterListInBrackets" ):
                listener.exitTypeParameterListInBrackets(self)




    def typeParameterListInBrackets(self):

        localctx = PhpParser.TypeParameterListInBracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameterListInBrackets)
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.match(PhpParser.Lgeneric)
                self.state = 456
                self.typeParameterList()
                self.state = 457
                self.match(PhpParser.Rgeneric)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.match(PhpParser.Lgeneric)
                self.state = 460
                self.typeParameterWithDefaultsList()
                self.state = 461
                self.match(PhpParser.Rgeneric)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.match(PhpParser.Lgeneric)
                self.state = 464
                self.typeParameterList()
                self.state = 465
                self.match(PhpParser.Comma)
                self.state = 466
                self.typeParameterWithDefaultsList()
                self.state = 467
                self.match(PhpParser.Rgeneric)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeParameterDeclContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeParameterDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)




    def typeParameterList(self):

        localctx = PhpParser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeParameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.typeParameterDecl()
            self.state = 476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 472
                    self.match(PhpParser.Comma)
                    self.state = 473
                    self.typeParameterDecl() 
                self.state = 478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterWithDefaultsListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterWithDefaultDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeParameterWithDefaultDeclContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeParameterWithDefaultDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterWithDefaultsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultsList" ):
                listener.enterTypeParameterWithDefaultsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultsList" ):
                listener.exitTypeParameterWithDefaultsList(self)




    def typeParameterWithDefaultsList(self):

        localctx = PhpParser.TypeParameterWithDefaultsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeParameterWithDefaultsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.typeParameterWithDefaultDecl()
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 480
                self.match(PhpParser.Comma)
                self.state = 481
                self.typeParameterWithDefaultDecl()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterDecl" ):
                listener.enterTypeParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterDecl" ):
                listener.exitTypeParameterDecl(self)




    def typeParameterDecl(self):

        localctx = PhpParser.TypeParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeParameterDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.attributes()
            self.state = 488
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterWithDefaultDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterWithDefaultDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultDecl" ):
                listener.enterTypeParameterWithDefaultDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultDecl" ):
                listener.exitTypeParameterWithDefaultDecl(self)




    def typeParameterWithDefaultDecl(self):

        localctx = PhpParser.TypeParameterWithDefaultDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeParameterWithDefaultDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.attributes()
            self.state = 491
            self.identifier()
            self.state = 492
            self.match(PhpParser.Eq)
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 493
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.state = 494
                self.primitiveType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDynamicArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lgeneric(self):
            return self.getToken(PhpParser.Lgeneric, 0)

        def typeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeRefContext,i)


        def Rgeneric(self):
            return self.getToken(PhpParser.Rgeneric, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_genericDynamicArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDynamicArgs" ):
                listener.enterGenericDynamicArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDynamicArgs" ):
                listener.exitGenericDynamicArgs(self)




    def genericDynamicArgs(self):

        localctx = PhpParser.GenericDynamicArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_genericDynamicArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(PhpParser.Lgeneric)
            self.state = 498
            self.typeRef()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 499
                self.match(PhpParser.Comma)
                self.state = 500
                self.typeRef()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 506
            self.match(PhpParser.Rgeneric)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributesGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributesGroupContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributesGroupContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PhpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.OpenSquareBracket:
                self.state = 508
                self.attributesGroup()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributeContext,i)


        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_attributesGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributesGroup" ):
                listener.enterAttributesGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributesGroup" ):
                listener.exitAttributesGroup(self)




    def attributesGroup(self):

        localctx = PhpParser.AttributesGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_attributesGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(PhpParser.OpenSquareBracket)
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 515
                self.identifier()
                self.state = 516
                self.match(PhpParser.Colon)


            self.state = 520
            self.attribute()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 521
                self.match(PhpParser.Comma)
                self.state = 522
                self.attribute()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self.match(PhpParser.CloseSquareBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def attributeArgList(self):
            return self.getTypedRuleContext(PhpParser.AttributeArgListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def attributeNamedArgList(self):
            return self.getTypedRuleContext(PhpParser.AttributeNamedArgListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = PhpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_attribute)
        try:
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.qualifiedNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.qualifiedNamespaceName()
                self.state = 532
                self.match(PhpParser.OpenRoundBracket)
                self.state = 533
                self.attributeArgList()
                self.state = 534
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.qualifiedNamespaceName()
                self.state = 537
                self.match(PhpParser.OpenRoundBracket)
                self.state = 538
                self.attributeNamedArgList()
                self.state = 539
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 541
                self.qualifiedNamespaceName()
                self.state = 542
                self.match(PhpParser.OpenRoundBracket)
                self.state = 543
                self.attributeArgList()
                self.state = 544
                self.match(PhpParser.Comma)
                self.state = 545
                self.attributeNamedArgList()
                self.state = 546
                self.match(PhpParser.CloseRoundBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_attributeArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeArgList" ):
                listener.enterAttributeArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeArgList" ):
                listener.exitAttributeArgList(self)




    def attributeArgList(self):

        localctx = PhpParser.AttributeArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_attributeArgList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.expression(0)
            self.state = 555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 551
                    self.match(PhpParser.Comma)
                    self.state = 552
                    self.expression(0) 
                self.state = 557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNamedArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeNamedArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributeNamedArgContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributeNamedArgContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_attributeNamedArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeNamedArgList" ):
                listener.enterAttributeNamedArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeNamedArgList" ):
                listener.exitAttributeNamedArgList(self)




    def attributeNamedArgList(self):

        localctx = PhpParser.AttributeNamedArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_attributeNamedArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.attributeNamedArg()
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 559
                self.match(PhpParser.Comma)
                self.state = 560
                self.attributeNamedArg()
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNamedArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_attributeNamedArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeNamedArg" ):
                listener.enterAttributeNamedArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeNamedArg" ):
                listener.exitAttributeNamedArg(self)




    def attributeNamedArg(self):

        localctx = PhpParser.AttributeNamedArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_attributeNamedArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(PhpParser.VarName)
            self.state = 567
            self.match(PhpParser.DoubleArrow)
            self.state = 568
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerStatementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InnerStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.InnerStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_innerStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatementList" ):
                listener.enterInnerStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatementList" ):
                listener.exitInnerStatementList(self)




    def innerStatementList(self):

        localctx = PhpParser.InnerStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_innerStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 570
                    self.innerStatement() 
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_innerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatement" ):
                listener.enterInnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatement" ):
                listener.exitInnerStatement(self)




    def innerStatement(self):

        localctx = PhpParser.InnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_innerStatement)
        try:
            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self.classDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(PhpParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(PhpParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(PhpParser.DoWhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(PhpParser.ForStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(PhpParser.SwitchStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(PhpParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(PhpParser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(PhpParser.ReturnStatementContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def globalStatement(self):
            return self.getTypedRuleContext(PhpParser.GlobalStatementContext,0)


        def staticVariableStatement(self):
            return self.getTypedRuleContext(PhpParser.StaticVariableStatementContext,0)


        def echoStatement(self):
            return self.getTypedRuleContext(PhpParser.EchoStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(PhpParser.ExpressionStatementContext,0)


        def unsetStatement(self):
            return self.getTypedRuleContext(PhpParser.UnsetStatementContext,0)


        def foreachStatement(self):
            return self.getTypedRuleContext(PhpParser.ForeachStatementContext,0)


        def tryCatchFinally(self):
            return self.getTypedRuleContext(PhpParser.TryCatchFinallyContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(PhpParser.ThrowStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(PhpParser.GotoStatementContext,0)


        def declareStatement(self):
            return self.getTypedRuleContext(PhpParser.DeclareStatementContext,0)


        def emptyStatement(self):
            return self.getTypedRuleContext(PhpParser.EmptyStatementContext,0)


        def inlineHtmlStatement(self):
            return self.getTypedRuleContext(PhpParser.InlineHtmlStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = PhpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        try:
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.identifier()
                self.state = 582
                self.match(PhpParser.Colon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.blockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 586
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 587
                self.doWhileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 588
                self.forStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 589
                self.switchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 590
                self.breakStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 591
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 592
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 593
                self.yieldExpression()
                self.state = 594
                self.match(PhpParser.SemiColon)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 596
                self.globalStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 597
                self.staticVariableStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 598
                self.echoStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 599
                self.expressionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 600
                self.unsetStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 601
                self.foreachStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 602
                self.tryCatchFinally()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 603
                self.throwStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 604
                self.gotoStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 605
                self.declareStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 606
                self.emptyStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 607
                self.inlineHtmlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = PhpParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = PhpParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_blockStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 613
            self.innerStatementList()
            self.state = 614
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(PhpParser.If, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def elseIfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ElseIfStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ElseIfStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(PhpParser.ElseStatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndIf(self):
            return self.getToken(PhpParser.EndIf, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def elseIfColonStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ElseIfColonStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ElseIfColonStatementContext,i)


        def elseColonStatement(self):
            return self.getTypedRuleContext(PhpParser.ElseColonStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = PhpParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(PhpParser.If)
                self.state = 617
                self.parenthesis()
                self.state = 618
                self.statement()
                self.state = 622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 619
                        self.elseIfStatement() 
                    self.state = 624
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.elseStatement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.match(PhpParser.If)
                self.state = 629
                self.parenthesis()
                self.state = 630
                self.match(PhpParser.Colon)
                self.state = 631
                self.innerStatementList()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.ElseIf:
                    self.state = 632
                    self.elseIfColonStatement()
                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Else:
                    self.state = 638
                    self.elseColonStatement()


                self.state = 641
                self.match(PhpParser.EndIf)
                self.state = 642
                self.match(PhpParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatement" ):
                listener.enterElseIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatement" ):
                listener.exitElseIfStatement(self)




    def elseIfStatement(self):

        localctx = PhpParser.ElseIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_elseIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(PhpParser.ElseIf)
            self.state = 647
            self.parenthesis()
            self.state = 648
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfColonStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseIfColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfColonStatement" ):
                listener.enterElseIfColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfColonStatement" ):
                listener.exitElseIfColonStatement(self)




    def elseIfColonStatement(self):

        localctx = PhpParser.ElseIfColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elseIfColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(PhpParser.ElseIf)
            self.state = 651
            self.parenthesis()
            self.state = 652
            self.match(PhpParser.Colon)
            self.state = 653
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = PhpParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(PhpParser.Else)
            self.state = 656
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseColonStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseColonStatement" ):
                listener.enterElseColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseColonStatement" ):
                listener.exitElseColonStatement(self)




    def elseColonStatement(self):

        localctx = PhpParser.ElseColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_elseColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(PhpParser.Else)
            self.state = 659
            self.match(PhpParser.Colon)
            self.state = 660
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(PhpParser.While, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndWhile(self):
            return self.getToken(PhpParser.EndWhile, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = PhpParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(PhpParser.While)
            self.state = 663
            self.parenthesis()
            self.state = 670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.ScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 664
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 665
                self.match(PhpParser.Colon)
                self.state = 666
                self.innerStatementList()
                self.state = 667
                self.match(PhpParser.EndWhile)
                self.state = 668
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Do(self):
            return self.getToken(PhpParser.Do, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def While(self):
            return self.getToken(PhpParser.While, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = PhpParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(PhpParser.Do)
            self.state = 673
            self.statement()
            self.state = 674
            self.match(PhpParser.While)
            self.state = 675
            self.parenthesis()
            self.state = 676
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(PhpParser.For, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndFor(self):
            return self.getToken(PhpParser.EndFor, 0)

        def forInit(self):
            return self.getTypedRuleContext(PhpParser.ForInitContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(PhpParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = PhpParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(PhpParser.For)
            self.state = 679
            self.match(PhpParser.OpenRoundBracket)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                self.state = 680
                self.forInit()


            self.state = 683
            self.match(PhpParser.SemiColon)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                self.state = 684
                self.expressionList()


            self.state = 687
            self.match(PhpParser.SemiColon)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                self.state = 688
                self.forUpdate()


            self.state = 691
            self.match(PhpParser.CloseRoundBracket)
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.ScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 692
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 693
                self.match(PhpParser.Colon)
                self.state = 694
                self.innerStatementList()
                self.state = 695
                self.match(PhpParser.EndFor)
                self.state = 696
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = PhpParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_forInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = PhpParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(PhpParser.Switch, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def EndSwitch(self):
            return self.getToken(PhpParser.EndSwitch, 0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def switchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SwitchBlockContext)
            else:
                return self.getTypedRuleContext(PhpParser.SwitchBlockContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = PhpParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(PhpParser.Switch)
            self.state = 705
            self.parenthesis()
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.OpenCurlyBracket]:
                self.state = 706
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.SemiColon:
                    self.state = 707
                    self.match(PhpParser.SemiColon)


                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Case or _la==PhpParser.Default:
                    self.state = 710
                    self.switchBlock()
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 716
                self.match(PhpParser.CloseCurlyBracket)
                pass
            elif token in [PhpParser.Colon]:
                self.state = 717
                self.match(PhpParser.Colon)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.SemiColon:
                    self.state = 718
                    self.match(PhpParser.SemiColon)


                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Case or _la==PhpParser.Default:
                    self.state = 721
                    self.switchBlock()
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 727
                self.match(PhpParser.EndSwitch)
                self.state = 728
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Colon)
            else:
                return self.getToken(PhpParser.Colon, i)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def Case(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Case)
            else:
                return self.getToken(PhpParser.Case, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Default(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Default)
            else:
                return self.getToken(PhpParser.Default, i)

        def getRuleIndex(self):
            return PhpParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = PhpParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 734
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PhpParser.Case]:
                        self.state = 731
                        self.match(PhpParser.Case)
                        self.state = 732
                        self.expression(0)
                        pass
                    elif token in [PhpParser.Default]:
                        self.state = 733
                        self.match(PhpParser.Default)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 736
                    _la = self._input.LA(1)
                    if not(_la==PhpParser.Colon or _la==PhpParser.SemiColon):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 739 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 741
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(PhpParser.Break, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = PhpParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(PhpParser.Break)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                self.state = 744
                self.expression(0)


            self.state = 747
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(PhpParser.Continue, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = PhpParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(PhpParser.Continue)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                self.state = 750
                self.expression(0)


            self.state = 753
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(PhpParser.Return, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = PhpParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(PhpParser.Return)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                self.state = 756
                self.expression(0)


            self.state = 759
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = PhpParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.expression(0)
            self.state = 762
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def chainList(self):
            return self.getTypedRuleContext(PhpParser.ChainListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_unsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetStatement" ):
                listener.enterUnsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetStatement" ):
                listener.exitUnsetStatement(self)




    def unsetStatement(self):

        localctx = PhpParser.UnsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_unsetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(PhpParser.Unset)
            self.state = 765
            self.match(PhpParser.OpenRoundBracket)
            self.state = 766
            self.chainList()
            self.state = 767
            self.match(PhpParser.CloseRoundBracket)
            self.state = 768
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Foreach(self):
            return self.getToken(PhpParser.Foreach, 0)

        def OpenRoundBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.OpenRoundBracket)
            else:
                return self.getToken(PhpParser.OpenRoundBracket, i)

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def CloseRoundBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.CloseRoundBracket)
            else:
                return self.getToken(PhpParser.CloseRoundBracket, i)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def List(self):
            return self.getToken(PhpParser.List, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndForeach(self):
            return self.getToken(PhpParser.EndForeach, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Ampersand(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Ampersand)
            else:
                return self.getToken(PhpParser.Ampersand, i)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_foreachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)




    def foreachStatement(self):

        localctx = PhpParser.ForeachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_foreachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(PhpParser.Foreach)
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 771
                self.match(PhpParser.OpenRoundBracket)
                self.state = 772
                self.chain()
                self.state = 773
                self.match(PhpParser.As)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ampersand:
                    self.state = 774
                    self.match(PhpParser.Ampersand)


                self.state = 777
                self.chain()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 778
                    self.match(PhpParser.DoubleArrow)
                    self.state = 780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Ampersand:
                        self.state = 779
                        self.match(PhpParser.Ampersand)


                    self.state = 782
                    self.chain()


                self.state = 785
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 2:
                self.state = 787
                self.match(PhpParser.OpenRoundBracket)
                self.state = 788
                self.expression(0)
                self.state = 789
                self.match(PhpParser.As)
                self.state = 790
                self.chain()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 791
                    self.match(PhpParser.DoubleArrow)
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Ampersand:
                        self.state = 792
                        self.match(PhpParser.Ampersand)


                    self.state = 795
                    self.chain()


                self.state = 798
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.state = 800
                self.match(PhpParser.OpenRoundBracket)
                self.state = 801
                self.chain()
                self.state = 802
                self.match(PhpParser.As)
                self.state = 803
                self.match(PhpParser.List)
                self.state = 804
                self.match(PhpParser.OpenRoundBracket)
                self.state = 805
                self.assignmentList()
                self.state = 806
                self.match(PhpParser.CloseRoundBracket)
                self.state = 807
                self.match(PhpParser.CloseRoundBracket)
                pass


            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.ScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 811
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 812
                self.match(PhpParser.Colon)
                self.state = 813
                self.innerStatementList()
                self.state = 814
                self.match(PhpParser.EndForeach)
                self.state = 815
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchFinallyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(PhpParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def finallyStatement(self):
            return self.getTypedRuleContext(PhpParser.FinallyStatementContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(PhpParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_tryCatchFinally

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchFinally" ):
                listener.enterTryCatchFinally(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchFinally" ):
                listener.exitTryCatchFinally(self)




    def tryCatchFinally(self):

        localctx = PhpParser.TryCatchFinallyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_tryCatchFinally)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(PhpParser.Try)
            self.state = 820
            self.blockStatement()
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 822 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 821
                        self.catchClause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 824 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 826
                    self.finallyStatement()


                pass

            elif la_ == 2:
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Catch:
                    self.state = 829
                    self.catchClause()
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 835
                self.finallyStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(PhpParser.Catch, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = PhpParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(PhpParser.Catch)
            self.state = 839
            self.match(PhpParser.OpenRoundBracket)
            self.state = 840
            self.qualifiedStaticTypeRef()
            self.state = 841
            self.match(PhpParser.VarName)
            self.state = 842
            self.match(PhpParser.CloseRoundBracket)
            self.state = 843
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(PhpParser.Finally, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_finallyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyStatement" ):
                listener.enterFinallyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyStatement" ):
                listener.exitFinallyStatement(self)




    def finallyStatement(self):

        localctx = PhpParser.FinallyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_finallyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(PhpParser.Finally)
            self.state = 846
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = PhpParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(PhpParser.Throw)
            self.state = 849
            self.expression(0)
            self.state = 850
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(PhpParser.Goto, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)




    def gotoStatement(self):

        localctx = PhpParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(PhpParser.Goto)
            self.state = 853
            self.identifier()
            self.state = 854
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Declare(self):
            return self.getToken(PhpParser.Declare, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def declareList(self):
            return self.getTypedRuleContext(PhpParser.DeclareListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndDeclare(self):
            return self.getToken(PhpParser.EndDeclare, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_declareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStatement" ):
                listener.enterDeclareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStatement" ):
                listener.exitDeclareStatement(self)




    def declareStatement(self):

        localctx = PhpParser.DeclareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(PhpParser.Declare)
            self.state = 857
            self.match(PhpParser.OpenRoundBracket)
            self.state = 858
            self.declareList()
            self.state = 859
            self.match(PhpParser.CloseRoundBracket)
            self.state = 866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.ScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 860
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 861
                self.match(PhpParser.Colon)
                self.state = 862
                self.innerStatementList()
                self.state = 863
                self.match(PhpParser.EndDeclare)
                self.state = 864
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineHtmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineHtml(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InlineHtmlContext)
            else:
                return self.getTypedRuleContext(PhpParser.InlineHtmlContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_inlineHtmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtmlStatement" ):
                listener.enterInlineHtmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtmlStatement" ):
                listener.exitInlineHtmlStatement(self)




    def inlineHtmlStatement(self):

        localctx = PhpParser.InlineHtmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inlineHtmlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 868
                    self.inlineHtml()

                else:
                    raise NoViableAltException(self)
                self.state = 871 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineHtmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElements(self):
            return self.getTypedRuleContext(PhpParser.HtmlElementsContext,0)


        def scriptTextPart(self):
            return self.getTypedRuleContext(PhpParser.ScriptTextPartContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_inlineHtml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtml" ):
                listener.enterInlineHtml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtml" ):
                listener.exitInlineHtml(self)




    def inlineHtml(self):

        localctx = PhpParser.InlineHtmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inlineHtml)
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptClose, PhpParser.StyleBody]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.htmlElements()
                pass
            elif token in [PhpParser.ScriptText]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.scriptTextPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInititalizerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInititalizerContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_declareList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareList" ):
                listener.enterDeclareList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareList" ):
                listener.exitDeclareList(self)




    def declareList(self):

        localctx = PhpParser.DeclareListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declareList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.identifierInititalizer()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 878
                self.match(PhpParser.Comma)
                self.state = 879
                self.identifierInititalizer()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(PhpParser.FormalParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = PhpParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Ellipsis - 182)) | (1 << (PhpParser.Ampersand - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)))) != 0):
                self.state = 885
                self.formalParameter()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 888
                self.match(PhpParser.Comma)
                self.state = 889
                self.formalParameter()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def variableInitializer(self):
            return self.getTypedRuleContext(PhpParser.VariableInitializerContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def Ellipsis(self):
            return self.getToken(PhpParser.Ellipsis, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = PhpParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.attributes()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or _la==PhpParser.NamespaceSeparator or _la==PhpParser.Label:
                self.state = 896
                self.typeHint()


            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 899
                self.match(PhpParser.Ampersand)


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ellipsis:
                self.state = 902
                self.match(PhpParser.Ellipsis)


            self.state = 905
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Callable(self):
            return self.getToken(PhpParser.Callable, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)




    def typeHint(self):

        localctx = PhpParser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeHint)
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.match(PhpParser.Callable)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.primitiveType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global(self):
            return self.getToken(PhpParser.Global, 0)

        def globalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.GlobalVarContext)
            else:
                return self.getTypedRuleContext(PhpParser.GlobalVarContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)




    def globalStatement(self):

        localctx = PhpParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_globalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(PhpParser.Global)
            self.state = 913
            self.globalVar()
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 914
                self.match(PhpParser.Comma)
                self.state = 915
                self.globalVar()
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 921
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalVarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Dollar(self):
            return self.getToken(PhpParser.Dollar, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_globalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVar" ):
                listener.enterGlobalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVar" ):
                listener.exitGlobalVar(self)




    def globalVar(self):

        localctx = PhpParser.GlobalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_globalVar)
        try:
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.match(PhpParser.VarName)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.match(PhpParser.Dollar)
                self.state = 925
                self.chain()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 926
                self.match(PhpParser.Dollar)
                self.state = 927
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 928
                self.expression(0)
                self.state = 929
                self.match(PhpParser.CloseCurlyBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EchoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Echo(self):
            return self.getToken(PhpParser.Echo, 0)

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_echoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEchoStatement" ):
                listener.enterEchoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEchoStatement" ):
                listener.exitEchoStatement(self)




    def echoStatement(self):

        localctx = PhpParser.EchoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_echoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(PhpParser.Echo)
            self.state = 934
            self.expressionList()
            self.state = 935
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.VariableInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_staticVariableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableStatement" ):
                listener.enterStaticVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableStatement" ):
                listener.exitStaticVariableStatement(self)




    def staticVariableStatement(self):

        localctx = PhpParser.StaticVariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_staticVariableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(PhpParser.Static)
            self.state = 938
            self.variableInitializer()
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 939
                self.match(PhpParser.Comma)
                self.state = 940
                self.variableInitializer()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 946
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def propertyModifiers(self):
            return self.getTypedRuleContext(PhpParser.PropertyModifiersContext,0)


        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.VariableInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def identifierInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInititalizerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInititalizerContext,i)


        def Function(self):
            return self.getToken(PhpParser.Function, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def methodBody(self):
            return self.getTypedRuleContext(PhpParser.MethodBodyContext,0)


        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def baseCtorCall(self):
            return self.getTypedRuleContext(PhpParser.BaseCtorCallContext,0)


        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def traitAdaptations(self):
            return self.getTypedRuleContext(PhpParser.TraitAdaptationsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)




    def classStatement(self):

        localctx = PhpParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.attributes()
                self.state = 949
                self.propertyModifiers()
                self.state = 950
                self.variableInitializer()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Comma:
                    self.state = 951
                    self.match(PhpParser.Comma)
                    self.state = 952
                    self.variableInitializer()
                    self.state = 957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 958
                self.match(PhpParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.attributes()
                self.state = 961
                self.match(PhpParser.Const)
                self.state = 962
                self.identifierInititalizer()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Comma:
                    self.state = 963
                    self.match(PhpParser.Comma)
                    self.state = 964
                    self.identifierInititalizer()
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 970
                self.match(PhpParser.SemiColon)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 972
                self.attributes()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Abstract or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (PhpParser.Final - 75)) | (1 << (PhpParser.Private - 75)) | (1 << (PhpParser.Protected - 75)) | (1 << (PhpParser.Public - 75)) | (1 << (PhpParser.Static - 75)))) != 0):
                    self.state = 973
                    self.memberModifiers()


                self.state = 976
                self.match(PhpParser.Function)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ampersand:
                    self.state = 977
                    self.match(PhpParser.Ampersand)


                self.state = 980
                self.identifier()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 981
                    self.typeParameterListInBrackets()


                self.state = 984
                self.match(PhpParser.OpenRoundBracket)
                self.state = 985
                self.formalParameterList()
                self.state = 986
                self.match(PhpParser.CloseRoundBracket)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Colon:
                    self.state = 987
                    self.baseCtorCall()


                self.state = 990
                self.methodBody()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(PhpParser.Use)
                self.state = 993
                self.qualifiedNamespaceNameList()
                self.state = 994
                self.traitAdaptations()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitAdaptationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def traitAdaptationStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TraitAdaptationStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.TraitAdaptationStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAdaptations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptations" ):
                listener.enterTraitAdaptations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptations" ):
                listener.exitTraitAdaptations(self)




    def traitAdaptations(self):

        localctx = PhpParser.TraitAdaptationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_traitAdaptations)
        self._la = 0 # Token type
        try:
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.SemiColon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.match(PhpParser.SemiColon)
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or _la==PhpParser.NamespaceSeparator or _la==PhpParser.Label:
                    self.state = 1000
                    self.traitAdaptationStatement()
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1006
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitAdaptationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitPrecedence(self):
            return self.getTypedRuleContext(PhpParser.TraitPrecedenceContext,0)


        def traitAlias(self):
            return self.getTypedRuleContext(PhpParser.TraitAliasContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAdaptationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptationStatement" ):
                listener.enterTraitAdaptationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptationStatement" ):
                listener.exitTraitAdaptationStatement(self)




    def traitAdaptationStatement(self):

        localctx = PhpParser.TraitAdaptationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_traitAdaptationStatement)
        try:
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.traitPrecedence()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.traitAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitPrecedenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def InsteadOf(self):
            return self.getToken(PhpParser.InsteadOf, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_traitPrecedence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitPrecedence" ):
                listener.enterTraitPrecedence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitPrecedence" ):
                listener.exitTraitPrecedence(self)




    def traitPrecedence(self):

        localctx = PhpParser.TraitPrecedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_traitPrecedence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.qualifiedNamespaceName()
            self.state = 1014
            self.match(PhpParser.DoubleColon)
            self.state = 1015
            self.identifier()
            self.state = 1016
            self.match(PhpParser.InsteadOf)
            self.state = 1017
            self.qualifiedNamespaceNameList()
            self.state = 1018
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitMethodReference(self):
            return self.getTypedRuleContext(PhpParser.TraitMethodReferenceContext,0)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def memberModifier(self):
            return self.getTypedRuleContext(PhpParser.MemberModifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAlias" ):
                listener.enterTraitAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAlias" ):
                listener.exitTraitAlias(self)




    def traitAlias(self):

        localctx = PhpParser.TraitAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_traitAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.traitMethodReference()
            self.state = 1021
            self.match(PhpParser.As)
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.memberModifier()
                pass

            elif la_ == 2:
                self.state = 1024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 1023
                    self.memberModifier()


                self.state = 1026
                self.identifier()
                pass


            self.state = 1029
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitMethodReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_traitMethodReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitMethodReference" ):
                listener.enterTraitMethodReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitMethodReference" ):
                listener.exitTraitMethodReference(self)




    def traitMethodReference(self):

        localctx = PhpParser.TraitMethodReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_traitMethodReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1031
                self.qualifiedNamespaceName()
                self.state = 1032
                self.match(PhpParser.DoubleColon)


            self.state = 1036
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseCtorCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_baseCtorCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseCtorCall" ):
                listener.enterBaseCtorCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseCtorCall" ):
                listener.exitBaseCtorCall(self)




    def baseCtorCall(self):

        localctx = PhpParser.BaseCtorCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_baseCtorCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(PhpParser.Colon)
            self.state = 1039
            self.identifier()
            self.state = 1040
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = PhpParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_methodBody)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.SemiColon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.match(PhpParser.SemiColon)
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.blockStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Var(self):
            return self.getToken(PhpParser.Var, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_propertyModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifiers" ):
                listener.enterPropertyModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifiers" ):
                listener.exitPropertyModifiers(self)




    def propertyModifiers(self):

        localctx = PhpParser.PropertyModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_propertyModifiers)
        try:
            self.state = 1048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Final, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Static]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1046
                self.memberModifiers()
                pass
            elif token in [PhpParser.Var]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1047
                self.match(PhpParser.Var)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberModifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberModifierContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_memberModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifiers" ):
                listener.enterMemberModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifiers" ):
                listener.exitMemberModifiers(self)




    def memberModifiers(self):

        localctx = PhpParser.MemberModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_memberModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1050
                self.memberModifier()
                self.state = 1053 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PhpParser.Abstract or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (PhpParser.Final - 75)) | (1 << (PhpParser.Private - 75)) | (1 << (PhpParser.Protected - 75)) | (1 << (PhpParser.Public - 75)) | (1 << (PhpParser.Static - 75)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def constantInititalizer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInititalizerContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = PhpParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_variableInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(PhpParser.VarName)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Eq:
                self.state = 1056
                self.match(PhpParser.Eq)
                self.state = 1057
                self.constantInititalizer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierInititalizerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def constantInititalizer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInititalizerContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_identifierInititalizer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierInititalizer" ):
                listener.enterIdentifierInititalizer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierInititalizer" ):
                listener.exitIdentifierInititalizer(self)




    def identifierInititalizer(self):

        localctx = PhpParser.IdentifierInititalizerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_identifierInititalizer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.identifier()
            self.state = 1061
            self.match(PhpParser.Eq)
            self.state = 1062
            self.constantInititalizer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def identifierInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInititalizerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInititalizerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_globalConstantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalConstantDeclaration" ):
                listener.enterGlobalConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalConstantDeclaration" ):
                listener.exitGlobalConstantDeclaration(self)




    def globalConstantDeclaration(self):

        localctx = PhpParser.GlobalConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_globalConstantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.attributes()
            self.state = 1065
            self.match(PhpParser.Const)
            self.state = 1066
            self.identifierInititalizer()
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1067
                self.match(PhpParser.Comma)
                self.state = 1068
                self.identifierInititalizer()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1074
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = PhpParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.expression(0)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1077
                self.match(PhpParser.Comma)
                self.state = 1078
                self.expression(0)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_parenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesis" ):
                listener.enterParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesis" ):
                listener.exitParenthesis(self)




    def parenthesis(self):

        localctx = PhpParser.ParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_parenthesis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1086
                self.yieldExpression()
                pass


            self.state = 1089
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PhpParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChainExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainExpression" ):
                listener.enterChainExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainExpression" ):
                listener.exitChainExpression(self)


    class UnaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def Tilde(self):
            return self.getToken(PhpParser.Tilde, 0)
        def SuppressWarnings(self):
            return self.getToken(PhpParser.SuppressWarnings, 0)
        def Bang(self):
            return self.getToken(PhpParser.Bang, 0)
        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)
        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperatorExpression" ):
                listener.enterUnaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperatorExpression" ):
                listener.exitUnaryOperatorExpression(self)


    class SpecialWordExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)
        def List(self):
            return self.getToken(PhpParser.List, 0)
        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def IsSet(self):
            return self.getToken(PhpParser.IsSet, 0)
        def chainList(self):
            return self.getTypedRuleContext(PhpParser.ChainListContext,0)

        def Empty(self):
            return self.getToken(PhpParser.Empty, 0)
        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Eval(self):
            return self.getToken(PhpParser.Eval, 0)
        def Exit(self):
            return self.getToken(PhpParser.Exit, 0)
        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)

        def Include(self):
            return self.getToken(PhpParser.Include, 0)
        def IncludeOnce(self):
            return self.getToken(PhpParser.IncludeOnce, 0)
        def Require(self):
            return self.getToken(PhpParser.Require, 0)
        def RequireOnce(self):
            return self.getToken(PhpParser.RequireOnce, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialWordExpression" ):
                listener.enterSpecialWordExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialWordExpression" ):
                listener.exitSpecialWordExpression(self)


    class ArrayCreationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)
        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def OpenSquareBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.OpenSquareBracket)
            else:
                return self.getToken(PhpParser.OpenSquareBracket, i)
        def CloseSquareBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.CloseSquareBracket)
            else:
                return self.getToken(PhpParser.CloseSquareBracket, i)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def arrayItemList(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parenthesis(self):
            return self.getTypedRuleContext(PhpParser.ParenthesisContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)


    class BackQuoteStringExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BackQuoteString(self):
            return self.getToken(PhpParser.BackQuoteString, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuoteStringExpression" ):
                listener.enterBackQuoteStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuoteStringExpression" ):
                listener.exitBackQuoteStringExpression(self)


    class ConditionalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)
        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)


    class ArithmeticExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Pow(self):
            return self.getToken(PhpParser.Pow, 0)
        def Asterisk(self):
            return self.getToken(PhpParser.Asterisk, 0)
        def Divide(self):
            return self.getToken(PhpParser.Divide, 0)
        def Percent(self):
            return self.getToken(PhpParser.Percent, 0)
        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)
        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)
        def Dot(self):
            return self.getToken(PhpParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExpression" ):
                listener.enterArithmeticExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExpression" ):
                listener.exitArithmeticExpression(self)


    class IndexerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringConstant(self):
            return self.getTypedRuleContext(PhpParser.StringConstantContext,0)

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexerExpression" ):
                listener.enterIndexerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexerExpression" ):
                listener.exitIndexerExpression(self)


    class ScalarExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(PhpParser.ConstantContext,0)

        def string(self):
            return self.getTypedRuleContext(PhpParser.StringContext,0)

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarExpression" ):
                listener.enterScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarExpression" ):
                listener.exitScalarExpression(self)


    class PrefixIncDecExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Inc(self):
            return self.getToken(PhpParser.Inc, 0)
        def Dec(self):
            return self.getToken(PhpParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixIncDecExpression" ):
                listener.enterPrefixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixIncDecExpression" ):
                listener.exitPrefixIncDecExpression(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def ShiftLeft(self):
            return self.getToken(PhpParser.ShiftLeft, 0)
        def ShiftRight(self):
            return self.getToken(PhpParser.ShiftRight, 0)
        def Less(self):
            return self.getToken(PhpParser.Less, 0)
        def IsSmallerOrEqual(self):
            return self.getToken(PhpParser.IsSmallerOrEqual, 0)
        def Greater(self):
            return self.getToken(PhpParser.Greater, 0)
        def IsGreaterOrEqual(self):
            return self.getToken(PhpParser.IsGreaterOrEqual, 0)
        def IsIdentical(self):
            return self.getToken(PhpParser.IsIdentical, 0)
        def IsNoidentical(self):
            return self.getToken(PhpParser.IsNoidentical, 0)
        def IsEqual(self):
            return self.getToken(PhpParser.IsEqual, 0)
        def IsNotEq(self):
            return self.getToken(PhpParser.IsNotEq, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def LogicalAnd(self):
            return self.getToken(PhpParser.LogicalAnd, 0)
        def LogicalXor(self):
            return self.getToken(PhpParser.LogicalXor, 0)
        def LogicalOr(self):
            return self.getToken(PhpParser.LogicalOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PrintExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Print(self):
            return self.getToken(PhpParser.Print, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintExpression" ):
                listener.enterPrintExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintExpression" ):
                listener.exitPrintExpression(self)


    class AssignmentExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(PhpParser.AssignmentOperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)
        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)


    class PostfixIncDecExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Inc(self):
            return self.getToken(PhpParser.Inc, 0)
        def Dec(self):
            return self.getToken(PhpParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixIncDecExpression" ):
                listener.enterPostfixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixIncDecExpression" ):
                listener.exitPostfixIncDecExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def castOperation(self):
            return self.getTypedRuleContext(PhpParser.CastOperationContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class InstanceOfExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def InstanceOf(self):
            return self.getToken(PhpParser.InstanceOf, 0)
        def typeRef(self):
            return self.getTypedRuleContext(PhpParser.TypeRefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceOfExpression" ):
                listener.enterInstanceOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceOfExpression" ):
                listener.exitInstanceOfExpression(self)


    class LambdaFunctionExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Function(self):
            return self.getToken(PhpParser.Function, 0)
        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)
        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)
        def lambdaFunctionUseVars(self):
            return self.getTypedRuleContext(PhpParser.LambdaFunctionUseVarsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpression" ):
                listener.enterLambdaFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpression" ):
                listener.exitLambdaFunctionExpression(self)


    class BitwiseExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)
        def Caret(self):
            return self.getToken(PhpParser.Caret, 0)
        def Pipe(self):
            return self.getToken(PhpParser.Pipe, 0)
        def BooleanAnd(self):
            return self.getToken(PhpParser.BooleanAnd, 0)
        def BooleanOr(self):
            return self.getToken(PhpParser.BooleanOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseExpression" ):
                listener.enterBitwiseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseExpression" ):
                listener.exitBitwiseExpression(self)


    class CloneExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Clone(self):
            return self.getToken(PhpParser.Clone, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneExpression" ):
                listener.enterCloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneExpression" ):
                listener.exitCloneExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PhpParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                localctx = PhpParser.CloneExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1092
                self.match(PhpParser.Clone)
                self.state = 1093
                self.expression(43)
                pass

            elif la_ == 2:
                localctx = PhpParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1094
                self.newExpr()
                pass

            elif la_ == 3:
                localctx = PhpParser.IndexerExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1095
                self.stringConstant()
                self.state = 1096
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1097
                self.expression(0)
                self.state = 1098
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 4:
                localctx = PhpParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1100
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1101
                self.castOperation()
                self.state = 1102
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1103
                self.expression(40)
                pass

            elif la_ == 5:
                localctx = PhpParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1105
                _la = self._input.LA(1)
                if not(_la==PhpParser.Tilde or _la==PhpParser.SuppressWarnings):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1106
                self.expression(39)
                pass

            elif la_ == 6:
                localctx = PhpParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1107
                _la = self._input.LA(1)
                if not(((((_la - 188)) & ~0x3f) == 0 and ((1 << (_la - 188)) & ((1 << (PhpParser.Bang - 188)) | (1 << (PhpParser.Plus - 188)) | (1 << (PhpParser.Minus - 188)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1108
                self.expression(38)
                pass

            elif la_ == 7:
                localctx = PhpParser.PrefixIncDecExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1109
                _la = self._input.LA(1)
                if not(_la==PhpParser.Inc or _la==PhpParser.Dec):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1110
                self.chain()
                pass

            elif la_ == 8:
                localctx = PhpParser.PostfixIncDecExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1111
                self.chain()
                self.state = 1112
                _la = self._input.LA(1)
                if not(_la==PhpParser.Inc or _la==PhpParser.Dec):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = PhpParser.PrintExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1114
                self.match(PhpParser.Print)
                self.state = 1115
                self.expression(35)
                pass

            elif la_ == 10:
                localctx = PhpParser.ChainExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1116
                self.chain()
                pass

            elif la_ == 11:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1117
                self.constant()
                pass

            elif la_ == 12:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1118
                self.string()
                pass

            elif la_ == 13:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1119
                self.match(PhpParser.Label)
                pass

            elif la_ == 14:
                localctx = PhpParser.BackQuoteStringExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1120
                self.match(PhpParser.BackQuoteString)
                pass

            elif la_ == 15:
                localctx = PhpParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1121
                self.parenthesis()
                pass

            elif la_ == 16:
                localctx = PhpParser.ArrayCreationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1133
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PhpParser.Array]:
                    self.state = 1122
                    self.match(PhpParser.Array)
                    self.state = 1123
                    self.match(PhpParser.OpenRoundBracket)
                    self.state = 1125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Ampersand - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                        self.state = 1124
                        self.arrayItemList()


                    self.state = 1127
                    self.match(PhpParser.CloseRoundBracket)
                    pass
                elif token in [PhpParser.OpenSquareBracket]:
                    self.state = 1128
                    self.match(PhpParser.OpenSquareBracket)
                    self.state = 1130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Ampersand - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                        self.state = 1129
                        self.arrayItemList()


                    self.state = 1132
                    self.match(PhpParser.CloseSquareBracket)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1135
                    self.match(PhpParser.OpenSquareBracket)
                    self.state = 1136
                    self.expression(0)
                    self.state = 1137
                    self.match(PhpParser.CloseSquareBracket)


                pass

            elif la_ == 17:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1141
                self.match(PhpParser.Yield)
                pass

            elif la_ == 18:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1142
                self.match(PhpParser.List)
                self.state = 1143
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1144
                self.assignmentList()
                self.state = 1145
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1146
                self.match(PhpParser.Eq)
                self.state = 1147
                self.expression(26)
                pass

            elif la_ == 19:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1149
                self.match(PhpParser.IsSet)
                self.state = 1150
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1151
                self.chainList()
                self.state = 1152
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 20:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1154
                self.match(PhpParser.Empty)
                self.state = 1155
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1156
                self.chain()
                self.state = 1157
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 21:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1159
                self.match(PhpParser.Eval)
                self.state = 1160
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1161
                self.expression(0)
                self.state = 1162
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 22:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1164
                self.match(PhpParser.Exit)
                self.state = 1168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1165
                    self.match(PhpParser.OpenRoundBracket)
                    self.state = 1166
                    self.match(PhpParser.CloseRoundBracket)

                elif la_ == 2:
                    self.state = 1167
                    self.parenthesis()


                pass

            elif la_ == 23:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1170
                _la = self._input.LA(1)
                if not(_la==PhpParser.Include or _la==PhpParser.IncludeOnce):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1171
                self.expression(21)
                pass

            elif la_ == 24:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1172
                _la = self._input.LA(1)
                if not(_la==PhpParser.Require or _la==PhpParser.RequireOnce):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1173
                self.expression(20)
                pass

            elif la_ == 25:
                localctx = PhpParser.LambdaFunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Static:
                    self.state = 1174
                    self.match(PhpParser.Static)


                self.state = 1177
                self.match(PhpParser.Function)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ampersand:
                    self.state = 1178
                    self.match(PhpParser.Ampersand)


                self.state = 1181
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1182
                self.formalParameterList()
                self.state = 1183
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Use:
                    self.state = 1184
                    self.lambdaFunctionUseVars()


                self.state = 1187
                self.blockStatement()
                pass

            elif la_ == 26:
                localctx = PhpParser.AssignmentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1189
                self.chain()
                self.state = 1190
                self.assignmentOperator()
                self.state = 1191
                self.expression(5)
                pass

            elif la_ == 27:
                localctx = PhpParser.AssignmentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1193
                self.chain()
                self.state = 1194
                self.match(PhpParser.Eq)
                self.state = 1195
                self.match(PhpParser.Ampersand)
                self.state = 1198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1196
                    self.chain()
                    pass

                elif la_ == 2:
                    self.state = 1197
                    self.newExpr()
                    pass


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1254
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                    if la_ == 1:
                        localctx = PhpParser.ArithmeticExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1202
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1203
                        localctx.op = self.match(PhpParser.Pow)
                        self.state = 1204
                        self.expression(18)
                        pass

                    elif la_ == 2:
                        localctx = PhpParser.ArithmeticExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1205
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1206
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PhpParser.Asterisk - 192)) | (1 << (PhpParser.Percent - 192)) | (1 << (PhpParser.Divide - 192)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1207
                        self.expression(17)
                        pass

                    elif la_ == 3:
                        localctx = PhpParser.ArithmeticExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1208
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1209
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (PhpParser.Plus - 190)) | (1 << (PhpParser.Minus - 190)) | (1 << (PhpParser.Dot - 190)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1210
                        self.expression(16)
                        pass

                    elif la_ == 4:
                        localctx = PhpParser.ComparisonExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1211
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1212
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PhpParser.ShiftLeft or _la==PhpParser.ShiftRight):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1213
                        self.expression(15)
                        pass

                    elif la_ == 5:
                        localctx = PhpParser.ComparisonExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1214
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1215
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & ((1 << (PhpParser.IsSmallerOrEqual - 161)) | (1 << (PhpParser.IsGreaterOrEqual - 161)) | (1 << (PhpParser.Less - 161)) | (1 << (PhpParser.Greater - 161)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1216
                        self.expression(14)
                        pass

                    elif la_ == 6:
                        localctx = PhpParser.ComparisonExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1217
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1218
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (PhpParser.IsIdentical - 157)) | (1 << (PhpParser.IsNoidentical - 157)) | (1 << (PhpParser.IsEqual - 157)) | (1 << (PhpParser.IsNotEq - 157)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1219
                        self.expression(13)
                        pass

                    elif la_ == 7:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1220
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1221
                        localctx.op = self.match(PhpParser.Ampersand)
                        self.state = 1222
                        self.expression(12)
                        pass

                    elif la_ == 8:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1223
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1224
                        localctx.op = self.match(PhpParser.Caret)
                        self.state = 1225
                        self.expression(11)
                        pass

                    elif la_ == 9:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1226
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1227
                        localctx.op = self.match(PhpParser.Pipe)
                        self.state = 1228
                        self.expression(10)
                        pass

                    elif la_ == 10:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1229
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1230
                        localctx.op = self.match(PhpParser.BooleanAnd)
                        self.state = 1231
                        self.expression(9)
                        pass

                    elif la_ == 11:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1232
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1233
                        localctx.op = self.match(PhpParser.BooleanOr)
                        self.state = 1234
                        self.expression(8)
                        pass

                    elif la_ == 12:
                        localctx = PhpParser.ConditionalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1235
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1236
                        localctx.op = self.match(PhpParser.QuestionMark)
                        self.state = 1238
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                            self.state = 1237
                            self.expression(0)


                        self.state = 1240
                        self.match(PhpParser.Colon)
                        self.state = 1241
                        self.expression(7)
                        pass

                    elif la_ == 13:
                        localctx = PhpParser.LogicalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1242
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1243
                        localctx.op = self.match(PhpParser.LogicalAnd)
                        self.state = 1244
                        self.expression(4)
                        pass

                    elif la_ == 14:
                        localctx = PhpParser.LogicalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1245
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1246
                        localctx.op = self.match(PhpParser.LogicalXor)
                        self.state = 1247
                        self.expression(3)
                        pass

                    elif la_ == 15:
                        localctx = PhpParser.LogicalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1248
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1249
                        localctx.op = self.match(PhpParser.LogicalOr)
                        self.state = 1250
                        self.expression(2)
                        pass

                    elif la_ == 16:
                        localctx = PhpParser.InstanceOfExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1251
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1252
                        self.match(PhpParser.InstanceOf)
                        self.state = 1253
                        self.typeRef()
                        pass

             
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(PhpParser.New, 0)

        def typeRef(self):
            return self.getTypedRuleContext(PhpParser.TypeRefContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_newExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpr" ):
                listener.enterNewExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpr" ):
                listener.exitNewExpr(self)




    def newExpr(self):

        localctx = PhpParser.NewExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_newExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(PhpParser.New)
            self.state = 1260
            self.typeRef()
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1261
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def PlusEqual(self):
            return self.getToken(PhpParser.PlusEqual, 0)

        def MinusEqual(self):
            return self.getToken(PhpParser.MinusEqual, 0)

        def MulEqual(self):
            return self.getToken(PhpParser.MulEqual, 0)

        def PowEqual(self):
            return self.getToken(PhpParser.PowEqual, 0)

        def DivEqual(self):
            return self.getToken(PhpParser.DivEqual, 0)

        def Concaequal(self):
            return self.getToken(PhpParser.Concaequal, 0)

        def ModEqual(self):
            return self.getToken(PhpParser.ModEqual, 0)

        def AndEqual(self):
            return self.getToken(PhpParser.AndEqual, 0)

        def OrEqual(self):
            return self.getToken(PhpParser.OrEqual, 0)

        def XorEqual(self):
            return self.getToken(PhpParser.XorEqual, 0)

        def ShiftLeftEqual(self):
            return self.getToken(PhpParser.ShiftLeftEqual, 0)

        def ShiftRightEqual(self):
            return self.getToken(PhpParser.ShiftRightEqual, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = PhpParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            _la = self._input.LA(1)
            if not(((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (PhpParser.PlusEqual - 163)) | (1 << (PhpParser.MinusEqual - 163)) | (1 << (PhpParser.MulEqual - 163)) | (1 << (PhpParser.PowEqual - 163)) | (1 << (PhpParser.DivEqual - 163)) | (1 << (PhpParser.Concaequal - 163)) | (1 << (PhpParser.ModEqual - 163)) | (1 << (PhpParser.ShiftLeftEqual - 163)) | (1 << (PhpParser.ShiftRightEqual - 163)) | (1 << (PhpParser.AndEqual - 163)) | (1 << (PhpParser.OrEqual - 163)) | (1 << (PhpParser.XorEqual - 163)) | (1 << (PhpParser.Eq - 163)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_yieldExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)




    def yieldExpression(self):

        localctx = PhpParser.YieldExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_yieldExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(PhpParser.Yield)
            self.state = 1267
            self.expression(0)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.DoubleArrow:
                self.state = 1268
                self.match(PhpParser.DoubleArrow)
                self.state = 1269
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ArrayItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.ArrayItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_arrayItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItemList" ):
                listener.enterArrayItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItemList" ):
                listener.exitArrayItemList(self)




    def arrayItemList(self):

        localctx = PhpParser.ArrayItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_arrayItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.arrayItem()
            self.state = 1277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1273
                    self.match(PhpParser.Comma)
                    self.state = 1274
                    self.arrayItem() 
                self.state = 1279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Comma:
                self.state = 1280
                self.match(PhpParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItem" ):
                listener.enterArrayItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItem" ):
                listener.exitArrayItem(self)




    def arrayItem(self):

        localctx = PhpParser.ArrayItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_arrayItem)
        self._la = 0 # Token type
        try:
            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1283
                self.expression(0)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 1284
                    self.match(PhpParser.DoubleArrow)
                    self.state = 1285
                    self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                    self.state = 1288
                    self.expression(0)
                    self.state = 1289
                    self.match(PhpParser.DoubleArrow)


                self.state = 1293
                self.match(PhpParser.Ampersand)
                self.state = 1294
                self.chain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionUseVarsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def lambdaFunctionUseVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.LambdaFunctionUseVarContext)
            else:
                return self.getTypedRuleContext(PhpParser.LambdaFunctionUseVarContext,i)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionUseVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVars" ):
                listener.enterLambdaFunctionUseVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVars" ):
                listener.exitLambdaFunctionUseVars(self)




    def lambdaFunctionUseVars(self):

        localctx = PhpParser.LambdaFunctionUseVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lambdaFunctionUseVars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(PhpParser.Use)
            self.state = 1298
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1299
            self.lambdaFunctionUseVar()
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1300
                self.match(PhpParser.Comma)
                self.state = 1301
                self.lambdaFunctionUseVar()
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionUseVarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionUseVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVar" ):
                listener.enterLambdaFunctionUseVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVar" ):
                listener.exitLambdaFunctionUseVar(self)




    def lambdaFunctionUseVar(self):

        localctx = PhpParser.LambdaFunctionUseVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_lambdaFunctionUseVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 1309
                self.match(PhpParser.Ampersand)


            self.state = 1312
            self.match(PhpParser.VarName)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedStaticTypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedStaticTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedStaticTypeRef" ):
                listener.enterQualifiedStaticTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedStaticTypeRef" ):
                listener.exitQualifiedStaticTypeRef(self)




    def qualifiedStaticTypeRef(self):

        localctx = PhpParser.QualifiedStaticTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_qualifiedStaticTypeRef)
        self._la = 0 # Token type
        try:
            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.qualifiedNamespaceName()
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 1315
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1318
                self.match(PhpParser.Static)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def indirectTypeRef(self):
            return self.getTypedRuleContext(PhpParser.IndirectTypeRefContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_typeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRef" ):
                listener.enterTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRef" ):
                listener.exitTypeRef(self)




    def typeRef(self):

        localctx = PhpParser.TypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeRef)
        try:
            self.state = 1330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1321
                    self.qualifiedNamespaceName()
                    pass

                elif la_ == 2:
                    self.state = 1322
                    self.indirectTypeRef()
                    pass


                self.state = 1326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1325
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                self.primitiveType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self.match(PhpParser.Static)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectTypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def ObjectOperator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.ObjectOperator)
            else:
                return self.getToken(PhpParser.ObjectOperator, i)

        def keyedFieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedFieldNameContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedFieldNameContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_indirectTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectTypeRef" ):
                listener.enterIndirectTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectTypeRef" ):
                listener.exitIndirectTypeRef(self)




    def indirectTypeRef(self):

        localctx = PhpParser.IndirectTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_indirectTypeRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.chainBase()
            self.state = 1337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1333
                    self.match(PhpParser.ObjectOperator)
                    self.state = 1334
                    self.keyedFieldName() 
                self.state = 1339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def NamespaceSeparator(self):
            return self.getToken(PhpParser.NamespaceSeparator, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedNamespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceName" ):
                listener.enterQualifiedNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceName" ):
                listener.exitQualifiedNamespaceName(self)




    def qualifiedNamespaceName(self):

        localctx = PhpParser.QualifiedNamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_qualifiedNamespaceName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1340
                self.match(PhpParser.Namespace)


            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.NamespaceSeparator:
                self.state = 1343
                self.match(PhpParser.NamespaceSeparator)


            self.state = 1346
            self.namespaceNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierContext,i)


        def NamespaceSeparator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.NamespaceSeparator)
            else:
                return self.getToken(PhpParser.NamespaceSeparator, i)

        def getRuleIndex(self):
            return PhpParser.RULE_namespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceNameList" ):
                listener.enterNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceNameList" ):
                listener.exitNamespaceNameList(self)




    def namespaceNameList(self):

        localctx = PhpParser.NamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_namespaceNameList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.identifier()
            self.state = 1353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1349
                    self.match(PhpParser.NamespaceSeparator)
                    self.state = 1350
                    self.identifier() 
                self.state = 1355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNamespaceNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedNamespaceNameContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedNamespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceNameList" ):
                listener.enterQualifiedNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceNameList" ):
                listener.exitQualifiedNamespaceNameList(self)




    def qualifiedNamespaceNameList(self):

        localctx = PhpParser.QualifiedNamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_qualifiedNamespaceNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.qualifiedNamespaceName()
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1357
                self.match(PhpParser.Comma)
                self.state = 1358
                self.qualifiedNamespaceName()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def actualArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ActualArgumentContext)
            else:
                return self.getTypedRuleContext(PhpParser.ActualArgumentContext,i)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = PhpParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1365
                self.actualArgument()
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Comma:
                    self.state = 1366
                    self.match(PhpParser.Comma)
                    self.state = 1367
                    self.actualArgument()
                    self.state = 1372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif la_ == 2:
                self.state = 1373
                self.yieldExpression()


            self.state = 1376
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(PhpParser.Ellipsis, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_actualArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArgument" ):
                listener.enterActualArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArgument" ):
                listener.exitActualArgument(self)




    def actualArgument(self):

        localctx = PhpParser.ActualArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_actualArgument)
        self._la = 0 # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Ellipsis, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ellipsis:
                    self.state = 1378
                    self.match(PhpParser.Ellipsis)


                self.state = 1381
                self.expression(0)
                pass
            elif token in [PhpParser.Ampersand]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.match(PhpParser.Ampersand)
                self.state = 1383
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantInititalizerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(PhpParser.ConstantContext,0)


        def string(self):
            return self.getTypedRuleContext(PhpParser.StringContext,0)


        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def constantArrayItemList(self):
            return self.getTypedRuleContext(PhpParser.ConstantArrayItemListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def constantInititalizer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInititalizerContext,0)


        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)

        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_constantInititalizer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantInititalizer" ):
                listener.enterConstantInititalizer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantInititalizer" ):
                listener.exitConstantInititalizer(self)




    def constantInititalizer(self):

        localctx = PhpParser.ConstantInititalizerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constantInititalizer)
        self._la = 0 # Token type
        try:
            self.state = 1407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1387
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1388
                self.match(PhpParser.Array)
                self.state = 1389
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                    self.state = 1390
                    self.constantArrayItemList()
                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Comma:
                        self.state = 1391
                        self.match(PhpParser.Comma)




                self.state = 1396
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1397
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                    self.state = 1398
                    self.constantArrayItemList()
                    self.state = 1400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Comma:
                        self.state = 1399
                        self.match(PhpParser.Comma)




                self.state = 1404
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1405
                _la = self._input.LA(1)
                if not(_la==PhpParser.Plus or _la==PhpParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1406
                self.constantInititalizer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantArrayItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantArrayItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ConstantArrayItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.ConstantArrayItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_constantArrayItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantArrayItemList" ):
                listener.enterConstantArrayItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantArrayItemList" ):
                listener.exitConstantArrayItemList(self)




    def constantArrayItemList(self):

        localctx = PhpParser.ConstantArrayItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_constantArrayItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.constantArrayItem()
            self.state = 1414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1410
                    self.match(PhpParser.Comma)
                    self.state = 1411
                    self.constantArrayItem() 
                self.state = 1416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantArrayItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ConstantInititalizerContext)
            else:
                return self.getTypedRuleContext(PhpParser.ConstantInititalizerContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_constantArrayItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantArrayItem" ):
                listener.enterConstantArrayItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantArrayItem" ):
                listener.exitConstantArrayItem(self)




    def constantArrayItem(self):

        localctx = PhpParser.ConstantArrayItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_constantArrayItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.constantInititalizer()
            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.DoubleArrow:
                self.state = 1418
                self.match(PhpParser.DoubleArrow)
                self.state = 1419
                self.constantInititalizer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Null(self):
            return self.getToken(PhpParser.Null, 0)

        def literalConstant(self):
            return self.getTypedRuleContext(PhpParser.LiteralConstantContext,0)


        def magicConstant(self):
            return self.getTypedRuleContext(PhpParser.MagicConstantContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PhpParser.ClassConstantContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = PhpParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_constant)
        try:
            self.state = 1427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1422
                self.match(PhpParser.Null)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.literalConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1424
                self.magicConstant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1425
                self.classConstant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1426
                self.qualifiedNamespaceName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(PhpParser.Real, 0)

        def BooleanConstant(self):
            return self.getToken(PhpParser.BooleanConstant, 0)

        def numericConstant(self):
            return self.getTypedRuleContext(PhpParser.NumericConstantContext,0)


        def stringConstant(self):
            return self.getTypedRuleContext(PhpParser.StringConstantContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)




    def literalConstant(self):

        localctx = PhpParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_literalConstant)
        try:
            self.state = 1433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Real]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1429
                self.match(PhpParser.Real)
                pass
            elif token in [PhpParser.BooleanConstant]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.match(PhpParser.BooleanConstant)
                pass
            elif token in [PhpParser.Octal, PhpParser.Decimal, PhpParser.Hex, PhpParser.Binary]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1431
                self.numericConstant()
                pass
            elif token in [PhpParser.Label]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1432
                self.stringConstant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Octal(self):
            return self.getToken(PhpParser.Octal, 0)

        def Decimal(self):
            return self.getToken(PhpParser.Decimal, 0)

        def Hex(self):
            return self.getToken(PhpParser.Hex, 0)

        def Binary(self):
            return self.getToken(PhpParser.Binary, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_numericConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericConstant" ):
                listener.enterNumericConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericConstant" ):
                listener.exitNumericConstant(self)




    def numericConstant(self):

        localctx = PhpParser.NumericConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_numericConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            _la = self._input.LA(1)
            if not(((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (PhpParser.Octal - 214)) | (1 << (PhpParser.Decimal - 214)) | (1 << (PhpParser.Hex - 214)) | (1 << (PhpParser.Binary - 214)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Parent_(self):
            return self.getToken(PhpParser.Parent_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def keyedVariable(self):
            return self.getTypedRuleContext(PhpParser.KeyedVariableContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassConstant" ):
                listener.enterClassConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassConstant" ):
                listener.exitClassConstant(self)




    def classConstant(self):

        localctx = PhpParser.ClassConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_classConstant)
        self._la = 0 # Token type
        try:
            self.state = 1452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1437
                _la = self._input.LA(1)
                if not(_la==PhpParser.Class or _la==PhpParser.Parent_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1438
                self.match(PhpParser.DoubleColon)
                self.state = 1443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1439
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1440
                    self.match(PhpParser.Constructor)
                    pass

                elif la_ == 3:
                    self.state = 1441
                    self.match(PhpParser.Get)
                    pass

                elif la_ == 4:
                    self.state = 1442
                    self.match(PhpParser.Set)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.NamespaceSeparator, PhpParser.Label]:
                    self.state = 1445
                    self.qualifiedStaticTypeRef()
                    pass
                elif token in [PhpParser.Dollar, PhpParser.VarName]:
                    self.state = 1446
                    self.keyedVariable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1449
                self.match(PhpParser.DoubleColon)
                self.state = 1450
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_stringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringConstant" ):
                listener.enterStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringConstant" ):
                listener.exitStringConstant(self)




    def stringConstant(self):

        localctx = PhpParser.StringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_stringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.match(PhpParser.Label)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StartHereDoc(self):
            return self.getToken(PhpParser.StartHereDoc, 0)

        def HereDocText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.HereDocText)
            else:
                return self.getToken(PhpParser.HereDocText, i)

        def StartNowDoc(self):
            return self.getToken(PhpParser.StartNowDoc, 0)

        def SingleQuoteString(self):
            return self.getToken(PhpParser.SingleQuoteString, 0)

        def DoubleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.DoubleQuote)
            else:
                return self.getToken(PhpParser.DoubleQuote, i)

        def interpolatedStringPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InterpolatedStringPartContext)
            else:
                return self.getTypedRuleContext(PhpParser.InterpolatedStringPartContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = PhpParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.state = 1477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self.match(PhpParser.StartHereDoc)
                self.state = 1458 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1457
                        self.match(PhpParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1460 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

                pass
            elif token in [PhpParser.StartNowDoc]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.match(PhpParser.StartNowDoc)
                self.state = 1464 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1463
                        self.match(PhpParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1466 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                pass
            elif token in [PhpParser.SingleQuoteString]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1468
                self.match(PhpParser.SingleQuoteString)
                pass
            elif token in [PhpParser.DoubleQuote]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1469
                self.match(PhpParser.DoubleQuote)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.StringPart - 182)))) != 0):
                    self.state = 1470
                    self.interpolatedStringPart()
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1476
                self.match(PhpParser.DoubleQuote)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterpolatedStringPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringPart(self):
            return self.getToken(PhpParser.StringPart, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_interpolatedStringPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolatedStringPart" ):
                listener.enterInterpolatedStringPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolatedStringPart" ):
                listener.exitInterpolatedStringPart(self)




    def interpolatedStringPart(self):

        localctx = PhpParser.InterpolatedStringPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_interpolatedStringPart)
        try:
            self.state = 1481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.StringPart]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1479
                self.match(PhpParser.StringPart)
                pass
            elif token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.NamespaceSeparator, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.VarName, PhpParser.Label]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_chainList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainList" ):
                listener.enterChainList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainList" ):
                listener.exitChainList(self)




    def chainList(self):

        localctx = PhpParser.ChainListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_chainList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.chain()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1484
                self.match(PhpParser.Comma)
                self.state = 1485
                self.chain()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(PhpParser.FunctionCallContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def memberAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberAccessContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberAccessContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_chain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChain" ):
                listener.enterChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChain" ):
                listener.exitChain(self)




    def chain(self):

        localctx = PhpParser.ChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_chain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1491
                self.chainBase()
                pass

            elif la_ == 2:
                self.state = 1492
                self.functionCall()
                pass

            elif la_ == 3:
                self.state = 1493
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1494
                self.newExpr()
                self.state = 1495
                self.match(PhpParser.CloseRoundBracket)
                pass


            self.state = 1502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1499
                    self.memberAccess() 
                self.state = 1504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ObjectOperator(self):
            return self.getToken(PhpParser.ObjectOperator, 0)

        def keyedFieldName(self):
            return self.getTypedRuleContext(PhpParser.KeyedFieldNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PhpParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_memberAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)




    def memberAccess(self):

        localctx = PhpParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_memberAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.match(PhpParser.ObjectOperator)
            self.state = 1506
            self.keyedFieldName()
            self.state = 1508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1507
                self.actualArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallName(self):
            return self.getTypedRuleContext(PhpParser.FunctionCallNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PhpParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = PhpParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.functionCallName()
            self.state = 1511
            self.actualArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PhpParser.ClassConstantContext,0)


        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionCallName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallName" ):
                listener.enterFunctionCallName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallName" ):
                listener.exitFunctionCallName(self)




    def functionCallName(self):

        localctx = PhpParser.FunctionCallNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_functionCallName)
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.qualifiedNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1514
                self.classConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1515
                self.chainBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_actualArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArguments" ):
                listener.enterActualArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArguments" ):
                listener.exitActualArguments(self)




    def actualArguments(self):

        localctx = PhpParser.ActualArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_actualArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Lgeneric:
                self.state = 1518
                self.genericDynamicArgs()


            self.state = 1521
            self.arguments()
            self.state = 1525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1522
                    self.squareCurlyExpression() 
                self.state = 1527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedVariableContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedVariableContext,i)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_chainBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainBase" ):
                listener.enterChainBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainBase" ):
                listener.exitChainBase(self)




    def chainBase(self):

        localctx = PhpParser.ChainBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_chainBase)
        try:
            self.state = 1537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Dollar, PhpParser.VarName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self.keyedVariable()
                self.state = 1531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1529
                    self.match(PhpParser.DoubleColon)
                    self.state = 1530
                    self.keyedVariable()


                pass
            elif token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.NamespaceSeparator, PhpParser.Label]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.qualifiedStaticTypeRef()
                self.state = 1534
                self.match(PhpParser.DoubleColon)
                self.state = 1535
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedSimpleFieldName(self):
            return self.getTypedRuleContext(PhpParser.KeyedSimpleFieldNameContext,0)


        def keyedVariable(self):
            return self.getTypedRuleContext(PhpParser.KeyedVariableContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedFieldName" ):
                listener.enterKeyedFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedFieldName" ):
                listener.exitKeyedFieldName(self)




    def keyedFieldName(self):

        localctx = PhpParser.KeyedFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_keyedFieldName)
        try:
            self.state = 1541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.OpenCurlyBracket, PhpParser.Label]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1539
                self.keyedSimpleFieldName()
                pass
            elif token in [PhpParser.Dollar, PhpParser.VarName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1540
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedSimpleFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedSimpleFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedSimpleFieldName" ):
                listener.enterKeyedSimpleFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedSimpleFieldName" ):
                listener.exitKeyedSimpleFieldName(self)




    def keyedSimpleFieldName(self):

        localctx = PhpParser.KeyedSimpleFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_keyedSimpleFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Label]:
                self.state = 1543
                self.identifier()
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.state = 1544
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1545
                self.expression(0)
                self.state = 1546
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1553
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1550
                    self.squareCurlyExpression() 
                self.state = 1555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Dollar(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Dollar)
            else:
                return self.getToken(PhpParser.Dollar, i)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedVariable" ):
                listener.enterKeyedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedVariable" ):
                listener.exitKeyedVariable(self)




    def keyedVariable(self):

        localctx = PhpParser.KeyedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_keyedVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1556
                    self.match(PhpParser.Dollar) 
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.VarName]:
                self.state = 1562
                self.match(PhpParser.VarName)
                pass
            elif token in [PhpParser.Dollar]:
                self.state = 1563
                self.match(PhpParser.Dollar)
                self.state = 1564
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1565
                self.expression(0)
                self.state = 1566
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1570
                    self.squareCurlyExpression() 
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SquareCurlyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_squareCurlyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSquareCurlyExpression" ):
                listener.enterSquareCurlyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSquareCurlyExpression" ):
                listener.exitSquareCurlyExpression(self)




    def squareCurlyExpression(self):

        localctx = PhpParser.SquareCurlyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_squareCurlyExpression)
        self._la = 0 # Token type
        try:
            self.state = 1585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.OpenSquareBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1576
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)) | (1 << (PhpParser.Inc - 107)) | (1 << (PhpParser.Dec - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Bang - 182)) | (1 << (PhpParser.Plus - 182)) | (1 << (PhpParser.Minus - 182)) | (1 << (PhpParser.Tilde - 182)) | (1 << (PhpParser.SuppressWarnings - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.OpenSquareBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)) | (1 << (PhpParser.Octal - 182)) | (1 << (PhpParser.Decimal - 182)) | (1 << (PhpParser.Real - 182)) | (1 << (PhpParser.Hex - 182)) | (1 << (PhpParser.Binary - 182)) | (1 << (PhpParser.BackQuoteString - 182)) | (1 << (PhpParser.SingleQuoteString - 182)) | (1 << (PhpParser.DoubleQuote - 182)) | (1 << (PhpParser.StartNowDoc - 182)) | (1 << (PhpParser.StartHereDoc - 182)))) != 0):
                    self.state = 1577
                    self.expression(0)


                self.state = 1580
                self.match(PhpParser.CloseSquareBracket)
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1582
                self.expression(0)
                self.state = 1583
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AssignmentListElementContext)
            else:
                return self.getTypedRuleContext(PhpParser.AssignmentListElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = PhpParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)))) != 0):
                self.state = 1587
                self.assignmentListElement()


            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1590
                self.match(PhpParser.Comma)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (PhpParser.NamespaceSeparator - 182)) | (1 << (PhpParser.Dollar - 182)) | (1 << (PhpParser.OpenRoundBracket - 182)) | (1 << (PhpParser.VarName - 182)) | (1 << (PhpParser.Label - 182)))) != 0):
                    self.state = 1591
                    self.assignmentListElement()


                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def List(self):
            return self.getToken(PhpParser.List, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentListElement" ):
                listener.enterAssignmentListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentListElement" ):
                listener.exitAssignmentListElement(self)




    def assignmentListElement(self):

        localctx = PhpParser.AssignmentListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_assignmentListElement)
        try:
            self.state = 1605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1599
                self.chain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1600
                self.match(PhpParser.List)
                self.state = 1601
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1602
                self.assignmentList()
                self.state = 1603
                self.match(PhpParser.CloseRoundBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = PhpParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            _la = self._input.LA(1)
            if not(_la==PhpParser.Abstract or _la==PhpParser.Final):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def As(self):
            return self.getToken(PhpParser.As, 0)

        def BinaryCast(self):
            return self.getToken(PhpParser.BinaryCast, 0)

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def BooleanConstant(self):
            return self.getToken(PhpParser.BooleanConstant, 0)

        def Break(self):
            return self.getToken(PhpParser.Break, 0)

        def Callable(self):
            return self.getToken(PhpParser.Callable, 0)

        def Case(self):
            return self.getToken(PhpParser.Case, 0)

        def Catch(self):
            return self.getToken(PhpParser.Catch, 0)

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Clone(self):
            return self.getToken(PhpParser.Clone, 0)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def Continue(self):
            return self.getToken(PhpParser.Continue, 0)

        def Declare(self):
            return self.getToken(PhpParser.Declare, 0)

        def Default(self):
            return self.getToken(PhpParser.Default, 0)

        def Do(self):
            return self.getToken(PhpParser.Do, 0)

        def DoubleCast(self):
            return self.getToken(PhpParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def Echo(self):
            return self.getToken(PhpParser.Echo, 0)

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def Empty(self):
            return self.getToken(PhpParser.Empty, 0)

        def EndDeclare(self):
            return self.getToken(PhpParser.EndDeclare, 0)

        def EndFor(self):
            return self.getToken(PhpParser.EndFor, 0)

        def EndForeach(self):
            return self.getToken(PhpParser.EndForeach, 0)

        def EndIf(self):
            return self.getToken(PhpParser.EndIf, 0)

        def EndSwitch(self):
            return self.getToken(PhpParser.EndSwitch, 0)

        def EndWhile(self):
            return self.getToken(PhpParser.EndWhile, 0)

        def Eval(self):
            return self.getToken(PhpParser.Eval, 0)

        def Exit(self):
            return self.getToken(PhpParser.Exit, 0)

        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def Finally(self):
            return self.getToken(PhpParser.Finally, 0)

        def FloatCast(self):
            return self.getToken(PhpParser.FloatCast, 0)

        def For(self):
            return self.getToken(PhpParser.For, 0)

        def Foreach(self):
            return self.getToken(PhpParser.Foreach, 0)

        def Function(self):
            return self.getToken(PhpParser.Function, 0)

        def Global(self):
            return self.getToken(PhpParser.Global, 0)

        def Goto(self):
            return self.getToken(PhpParser.Goto, 0)

        def If(self):
            return self.getToken(PhpParser.If, 0)

        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def Import(self):
            return self.getToken(PhpParser.Import, 0)

        def Include(self):
            return self.getToken(PhpParser.Include, 0)

        def IncludeOnce(self):
            return self.getToken(PhpParser.IncludeOnce, 0)

        def InstanceOf(self):
            return self.getToken(PhpParser.InstanceOf, 0)

        def InsteadOf(self):
            return self.getToken(PhpParser.InsteadOf, 0)

        def Int16Cast(self):
            return self.getToken(PhpParser.Int16Cast, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def Int8Cast(self):
            return self.getToken(PhpParser.Int8Cast, 0)

        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def IsSet(self):
            return self.getToken(PhpParser.IsSet, 0)

        def List(self):
            return self.getToken(PhpParser.List, 0)

        def LogicalAnd(self):
            return self.getToken(PhpParser.LogicalAnd, 0)

        def LogicalOr(self):
            return self.getToken(PhpParser.LogicalOr, 0)

        def LogicalXor(self):
            return self.getToken(PhpParser.LogicalXor, 0)

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def New(self):
            return self.getToken(PhpParser.New, 0)

        def Null(self):
            return self.getToken(PhpParser.Null, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Parent_(self):
            return self.getToken(PhpParser.Parent_, 0)

        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def Print(self):
            return self.getToken(PhpParser.Print, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def Protected(self):
            return self.getToken(PhpParser.Protected, 0)

        def Public(self):
            return self.getToken(PhpParser.Public, 0)

        def Require(self):
            return self.getToken(PhpParser.Require, 0)

        def RequireOnce(self):
            return self.getToken(PhpParser.RequireOnce, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def Return(self):
            return self.getToken(PhpParser.Return, 0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def Switch(self):
            return self.getToken(PhpParser.Switch, 0)

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def Trait(self):
            return self.getToken(PhpParser.Trait, 0)

        def Try(self):
            return self.getToken(PhpParser.Try, 0)

        def Typeof(self):
            return self.getToken(PhpParser.Typeof, 0)

        def UintCast(self):
            return self.getToken(PhpParser.UintCast, 0)

        def UnicodeCast(self):
            return self.getToken(PhpParser.UnicodeCast, 0)

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def Var(self):
            return self.getToken(PhpParser.Var, 0)

        def While(self):
            return self.getToken(PhpParser.While, 0)

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def Call(self):
            return self.getToken(PhpParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PhpParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PhpParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PhpParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PhpParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PhpParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PhpParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PhpParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PhpParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PhpParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PhpParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PhpParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PhpParser.DebugInfo, 0)

        def Namespace__(self):
            return self.getToken(PhpParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PhpParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PhpParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PhpParser.Function__, 0)

        def Method__(self):
            return self.getToken(PhpParser.Method__, 0)

        def Line__(self):
            return self.getToken(PhpParser.Line__, 0)

        def File__(self):
            return self.getToken(PhpParser.File__, 0)

        def Dir__(self):
            return self.getToken(PhpParser.Dir__, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = PhpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            _la = self._input.LA(1)
            if not(((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)) | (1 << (PhpParser.Parent_ - 43)) | (1 << (PhpParser.Partial - 43)) | (1 << (PhpParser.Print - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or _la==PhpParser.Label):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Public(self):
            return self.getToken(PhpParser.Public, 0)

        def Protected(self):
            return self.getToken(PhpParser.Protected, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)




    def memberModifier(self):

        localctx = PhpParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            _la = self._input.LA(1)
            if not(_la==PhpParser.Abstract or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (PhpParser.Final - 75)) | (1 << (PhpParser.Private - 75)) | (1 << (PhpParser.Protected - 75)) | (1 << (PhpParser.Public - 75)) | (1 << (PhpParser.Static - 75)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MagicConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace__(self):
            return self.getToken(PhpParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PhpParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PhpParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PhpParser.Function__, 0)

        def Method__(self):
            return self.getToken(PhpParser.Method__, 0)

        def Line__(self):
            return self.getToken(PhpParser.Line__, 0)

        def File__(self):
            return self.getToken(PhpParser.File__, 0)

        def Dir__(self):
            return self.getToken(PhpParser.Dir__, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_magicConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicConstant" ):
                listener.enterMagicConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicConstant" ):
                listener.exitMagicConstant(self)




    def magicConstant(self):

        localctx = PhpParser.MagicConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_magicConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            _la = self._input.LA(1)
            if not(((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (PhpParser.Namespace__ - 144)) | (1 << (PhpParser.Class__ - 144)) | (1 << (PhpParser.Traic__ - 144)) | (1 << (PhpParser.Function__ - 144)) | (1 << (PhpParser.Method__ - 144)) | (1 << (PhpParser.Line__ - 144)) | (1 << (PhpParser.File__ - 144)) | (1 << (PhpParser.Dir__ - 144)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MagicMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def Call(self):
            return self.getToken(PhpParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PhpParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PhpParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PhpParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PhpParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PhpParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PhpParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PhpParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PhpParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PhpParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PhpParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PhpParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PhpParser.DebugInfo, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_magicMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicMethod" ):
                listener.enterMagicMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicMethod" ):
                listener.exitMagicMethod(self)




    def magicMethod(self):

        localctx = PhpParser.MagicMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_magicMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PhpParser.Get - 128)) | (1 << (PhpParser.Set - 128)) | (1 << (PhpParser.Call - 128)) | (1 << (PhpParser.CallStatic - 128)) | (1 << (PhpParser.Constructor - 128)) | (1 << (PhpParser.Destruct - 128)) | (1 << (PhpParser.Wakeup - 128)) | (1 << (PhpParser.Sleep - 128)) | (1 << (PhpParser.Autoload - 128)) | (1 << (PhpParser.IsSet__ - 128)) | (1 << (PhpParser.Unset__ - 128)) | (1 << (PhpParser.ToString__ - 128)) | (1 << (PhpParser.Invoke - 128)) | (1 << (PhpParser.SetState - 128)) | (1 << (PhpParser.Clone__ - 128)) | (1 << (PhpParser.DebugInfo - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = PhpParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.Array) | (1 << PhpParser.BoolType) | (1 << PhpParser.DoubleType))) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (PhpParser.Int64Type - 92)) | (1 << (PhpParser.IntType - 92)) | (1 << (PhpParser.ObjectType - 92)) | (1 << (PhpParser.Resource - 92)) | (1 << (PhpParser.StringType - 92)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def Int8Cast(self):
            return self.getToken(PhpParser.Int8Cast, 0)

        def Int16Cast(self):
            return self.getToken(PhpParser.Int16Cast, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def UintCast(self):
            return self.getToken(PhpParser.UintCast, 0)

        def DoubleCast(self):
            return self.getToken(PhpParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def FloatCast(self):
            return self.getToken(PhpParser.FloatCast, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def BinaryCast(self):
            return self.getToken(PhpParser.BinaryCast, 0)

        def UnicodeCast(self):
            return self.getToken(PhpParser.UnicodeCast, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_castOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperation" ):
                listener.enterCastOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperation" ):
                listener.exitCastOperation(self)




    def castOperation(self):

        localctx = PhpParser.CastOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_castOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.Array) | (1 << PhpParser.BinaryCast) | (1 << PhpParser.BoolType) | (1 << PhpParser.DoubleCast) | (1 << PhpParser.DoubleType))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.FloatCast - 77)) | (1 << (PhpParser.Int8Cast - 77)) | (1 << (PhpParser.Int16Cast - 77)) | (1 << (PhpParser.Int64Type - 77)) | (1 << (PhpParser.IntType - 77)) | (1 << (PhpParser.ObjectType - 77)) | (1 << (PhpParser.Resource - 77)) | (1 << (PhpParser.StringType - 77)) | (1 << (PhpParser.UintCast - 77)) | (1 << (PhpParser.UnicodeCast - 77)) | (1 << (PhpParser.Unset - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[83] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 17)
         




